"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1042],{5680:(e,n,r)=>{r.d(n,{xA:()=>u,yg:()=>d});var t=r(6540);function l(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){l(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,t,l=function(e,n){if(null==e)return{};var r,t,l={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(l[r]=e[r]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(l[r]=e[r])}return l}var p=t.createContext({}),s=function(e){var n=t.useContext(p),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},u=function(e){var n=s(e.components);return t.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var r=e.components,l=e.mdxType,a=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),g=s(r),d=l,m=g["".concat(p,".").concat(d)]||g[d]||c[d]||a;return r?t.createElement(m,i(i({ref:n},u),{},{components:r})):t.createElement(m,i({ref:n},u))}));function d(e,n){var r=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var a=r.length,i=new Array(a);i[0]=g;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var s=2;s<a;s++)i[s]=r[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}g.displayName="MDXCreateElement"},2204:(e,n,r)=>{r.r(n),r.d(n,{contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var t=r(8168),l=(r(6540),r(5680));const a={sidebar_label:"trial_runner",title:"onlineml.trial_runner"},i=void 0,o={unversionedId:"reference/onlineml/trial_runner",id:"reference/onlineml/trial_runner",isDocsHomePage:!1,title:"onlineml.trial_runner",description:"OnlineTrialRunner Objects",source:"@site/docs/reference/onlineml/trial_runner.md",sourceDirName:"reference/onlineml",slug:"/reference/onlineml/trial_runner",permalink:"/FLAML/docs/reference/onlineml/trial_runner",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/onlineml/trial_runner.md",tags:[],version:"current",frontMatter:{sidebar_label:"trial_runner",title:"onlineml.trial_runner"},sidebar:"referenceSideBar",previous:{title:"trial",permalink:"/FLAML/docs/reference/onlineml/trial"},next:{title:"online_scheduler",permalink:"/FLAML/docs/reference/tune/scheduler/online_scheduler"}},p=[{value:"OnlineTrialRunner Objects",id:"onlinetrialrunner-objects",children:[{value:"__init__",id:"__init__",children:[],level:4},{value:"champion_trial",id:"champion_trial",children:[],level:4},{value:"running_trials",id:"running_trials",children:[],level:4},{value:"step",id:"step",children:[],level:4},{value:"get_top_running_trials",id:"get_top_running_trials",children:[],level:4},{value:"get_trials",id:"get_trials",children:[],level:4},{value:"add_trial",id:"add_trial",children:[],level:4},{value:"stop_trial",id:"stop_trial",children:[],level:4},{value:"pause_trial",id:"pause_trial",children:[],level:4},{value:"run_trial",id:"run_trial",children:[],level:4}],level:2}],s={toc:p};function u(e){let{components:n,...r}=e;return(0,l.yg)("wrapper",(0,t.A)({},s,r,{components:n,mdxType:"MDXLayout"}),(0,l.yg)("h2",{id:"onlinetrialrunner-objects"},"OnlineTrialRunner Objects"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"class OnlineTrialRunner()\n")),(0,l.yg)("p",null,"Class for the OnlineTrialRunner."),(0,l.yg)("h4",{id:"__init__"},"_","_","init","_","_"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},'def __init__(max_live_model_num: int,\n             searcher=None,\n             scheduler=None,\n             champion_test_policy="loss_ucb",\n             **kwargs)\n')),(0,l.yg)("p",null,"Constructor."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"max_live_model_num")," - The maximum number of 'live'/running models allowed."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"searcher")," - A class for generating Trial objects progressively.\nThe ConfigOracle is implemented in the searcher."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"scheduler")," - A class for managing the 'live' trials and allocating the\nresources for the trials."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"champion_test_policy")," - A string to specify what test policy to test for\nchampion. Currently can choose from ","['loss_ucb', 'loss_avg', 'loss_lcb', None]",".")),(0,l.yg)("h4",{id:"champion_trial"},"champion","_","trial"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"@property\ndef champion_trial() -> Trial\n")),(0,l.yg)("p",null,"The champion trial."),(0,l.yg)("h4",{id:"running_trials"},"running","_","trials"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"@property\ndef running_trials()\n")),(0,l.yg)("p",null,"The running/'live' trials."),(0,l.yg)("h4",{id:"step"},"step"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def step(data_sample=None, prediction_trial_tuple=None)\n")),(0,l.yg)("p",null,"Schedule one trial to run each time it is called."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"data_sample")," - One data example."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"prediction_trial_tuple")," - A list of information containing\n(prediction_made, prediction_trial).")),(0,l.yg)("h4",{id:"get_top_running_trials"},"get","_","top","_","running","_","trials"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},'def get_top_running_trials(top_ratio=None, top_metric="ucb") -> list\n')),(0,l.yg)("p",null,"Get a list of trial ids, whose performance is among the top running trials."),(0,l.yg)("h4",{id:"get_trials"},"get","_","trials"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def get_trials() -> list\n")),(0,l.yg)("p",null,"Return the list of trials managed by this TrialRunner."),(0,l.yg)("h4",{id:"add_trial"},"add","_","trial"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def add_trial(new_trial)\n")),(0,l.yg)("p",null,"Add a new trial to this TrialRunner.\nTrials may be added at any time."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"new_trial")," ",(0,l.yg)("em",{parentName:"li"},"Trial")," - Trial to queue.")),(0,l.yg)("h4",{id:"stop_trial"},"stop","_","trial"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def stop_trial(trial)\n")),(0,l.yg)("p",null,"Stop a trial: set the status of a trial to be\nTrial.TERMINATED and perform other subsequent operations."),(0,l.yg)("h4",{id:"pause_trial"},"pause","_","trial"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def pause_trial(trial)\n")),(0,l.yg)("p",null,"Pause a trial: set the status of a trial to be Trial.PAUSED\nand perform other subsequent operations."),(0,l.yg)("h4",{id:"run_trial"},"run","_","trial"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def run_trial(trial)\n")),(0,l.yg)("p",null,"Run a trial: set the status of a trial to be Trial.RUNNING\nand perform other subsequent operations."))}u.isMDXComponent=!0}}]);