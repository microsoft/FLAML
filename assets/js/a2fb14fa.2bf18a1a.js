"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3426],{5680:(e,r,t)=>{t.d(r,{xA:()=>h,yg:()=>d});var n=t(6540);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function c(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?c(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function o(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},c=Object.keys(e);for(n=0;n<c.length;n++)t=c[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)t=c[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),i=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},h=function(e){var r=i(e.components);return n.createElement(s.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,c=e.originalType,s=e.parentName,h=o(e,["components","mdxType","originalType","parentName"]),p=i(t),d=a,g=p["".concat(s,".").concat(d)]||p[d]||u[d]||c;return t?n.createElement(g,l(l({ref:r},h),{},{components:t})):n.createElement(g,l({ref:r},h))}));function d(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var c=t.length,l=new Array(c);l[0]=p;var o={};for(var s in r)hasOwnProperty.call(r,s)&&(o[s]=r[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var i=2;i<c;i++)l[i]=t[i];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},9570:(e,r,t)=>{t.r(r),t.d(r,{contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>o,toc:()=>s});var n=t(8168),a=(t(6540),t(5680));const c={sidebar_label:"search_thread",title:"tune.searcher.search_thread"},l=void 0,o={unversionedId:"reference/tune/searcher/search_thread",id:"reference/tune/searcher/search_thread",isDocsHomePage:!1,title:"tune.searcher.search_thread",description:"SearchThread Objects",source:"@site/docs/reference/tune/searcher/search_thread.md",sourceDirName:"reference/tune/searcher",slug:"/reference/tune/searcher/search_thread",permalink:"/FLAML/docs/reference/tune/searcher/search_thread",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/tune/searcher/search_thread.md",tags:[],version:"current",frontMatter:{sidebar_label:"search_thread",title:"tune.searcher.search_thread"},sidebar:"referenceSideBar",previous:{title:"online_searcher",permalink:"/FLAML/docs/reference/tune/searcher/online_searcher"},next:{title:"suggestion",permalink:"/FLAML/docs/reference/tune/searcher/suggestion"}},s=[{value:"SearchThread Objects",id:"searchthread-objects",children:[{value:"__init__",id:"__init__",children:[],level:4},{value:"suggest",id:"suggest",children:[],level:4},{value:"on_trial_complete",id:"on_trial_complete",children:[],level:4},{value:"reach",id:"reach",children:[],level:4},{value:"can_suggest",id:"can_suggest",children:[],level:4}],level:2}],i={toc:s};function h(e){let{components:r,...t}=e;return(0,a.yg)("wrapper",(0,n.A)({},i,t,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"searchthread-objects"},"SearchThread Objects"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"class SearchThread()\n")),(0,a.yg)("p",null,"Class of global or local search thread."),(0,a.yg)("h4",{id:"__init__"},"_","_","init","_","_"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'def __init__(mode: str = "min",\n             search_alg: Optional[Searcher] = None,\n             cost_attr: Optional[str] = TIME_TOTAL_S,\n             eps: Optional[float] = 1.0)\n')),(0,a.yg)("p",null,"When search_alg is omitted, use local search FLOW2."),(0,a.yg)("h4",{id:"suggest"},"suggest"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"def suggest(trial_id: str) -> Optional[Dict]\n")),(0,a.yg)("p",null,"Use the suggest() of the underlying search algorithm."),(0,a.yg)("h4",{id:"on_trial_complete"},"on","_","trial","_","complete"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"def on_trial_complete(trial_id: str,\n                      result: Optional[Dict] = None,\n                      error: bool = False)\n")),(0,a.yg)("p",null,"Update the statistics of the thread."),(0,a.yg)("h4",{id:"reach"},"reach"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"def reach(thread) -> bool\n")),(0,a.yg)("p",null,"Whether the incumbent can reach the incumbent of thread."),(0,a.yg)("h4",{id:"can_suggest"},"can","_","suggest"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"@property\ndef can_suggest() -> bool\n")),(0,a.yg)("p",null,"Whether the thread can suggest new configs."))}h.isMDXComponent=!0}}]);