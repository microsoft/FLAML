"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1630],{5680:(e,t,r)=>{r.d(t,{xA:()=>s,yg:()=>m});var n=r(6540);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=u(r),m=a,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||o;return r?n.createElement(f,l(l({ref:t},s),{},{components:r})):n.createElement(f,l({ref:t},s))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},315:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>l,default:()=>s,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=r(8168),a=(r(6540),r(5680));const o={sidebar_label:"mlflow",title:"fabric.mlflow"},l=void 0,i={unversionedId:"reference/fabric/mlflow",id:"reference/fabric/mlflow",isDocsHomePage:!1,title:"fabric.mlflow",description:"SEARCH\\MAX\\RESULTS",source:"@site/docs/reference/fabric/mlflow.md",sourceDirName:"reference/fabric",slug:"/reference/fabric/mlflow",permalink:"/FLAML/docs/reference/fabric/mlflow",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/fabric/mlflow.md",tags:[],version:"current",frontMatter:{sidebar_label:"mlflow",title:"fabric.mlflow"},sidebar:"referenceSideBar",previous:{title:"suggest",permalink:"/FLAML/docs/reference/default/suggest"},next:{title:"autovw",permalink:"/FLAML/docs/reference/onlineml/autovw"}},c=[{value:"SEARCH_MAX_RESULTS",id:"search_max_results",children:[],level:4},{value:"time_it",id:"time_it",children:[],level:4},{value:"MLflowIntegration Objects",id:"mlflowintegration-objects",children:[{value:"pickle_and_log_automl_artifacts",id:"pickle_and_log_automl_artifacts",children:[],level:4},{value:"adopt_children",id:"adopt_children",children:[],level:4},{value:"retrain",id:"retrain",children:[],level:4}],level:2}],u={toc:c};function s(e){let{components:t,...r}=e;return(0,a.yg)("wrapper",(0,n.A)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h4",{id:"search_max_results"},"SEARCH","_","MAX","_","RESULTS"),(0,a.yg)("p",null,"Each train should not have more than 5000 trials"),(0,a.yg)("h4",{id:"time_it"},"time","_","it"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"def time_it(func_or_code=None)\n")),(0,a.yg)("p",null,"Decorator or function that measures execution time."),(0,a.yg)("p",null,"Can be used in three ways:"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},"As a decorator with no arguments: @time_it"),(0,a.yg)("li",{parentName:"ol"},"As a decorator with arguments: @time_it()"),(0,a.yg)("li",{parentName:"ol"},'As a function call with a string of code to execute and time: time_it("some_code()")')),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"func_or_code")," ",(0,a.yg)("em",{parentName:"li"},"callable or str, optional")," - Either a function to decorate or\na string of code to execute and time.")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Returns"),":"),(0,a.yg)("p",null,"  callable or None: Returns a decorated function if used as a decorator,\nor None if used to execute a string of code."),(0,a.yg)("h2",{id:"mlflowintegration-objects"},"MLflowIntegration Objects"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"class MLflowIntegration()\n")),(0,a.yg)("h4",{id:"pickle_and_log_automl_artifacts"},"pickle","_","and","_","log","_","automl","_","artifacts"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"def pickle_and_log_automl_artifacts(automl,\n                                    model,\n                                    estimator,\n                                    signature=None,\n                                    run_id=None)\n")),(0,a.yg)("p",null,"log automl artifacts to mlflow\nload back with ",(0,a.yg)("inlineCode",{parentName:"p"},"automl = mlflow.pyfunc.load_model(model_run_id_or_uri)"),", then do prediction with ",(0,a.yg)("inlineCode",{parentName:"p"},"automl.predict(X)")),(0,a.yg)("h4",{id:"adopt_children"},"adopt","_","children"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"def adopt_children(result=None)\n")),(0,a.yg)("p",null,'Set autologging child runs to nested by fetching them after all child runs are completed.\nNote that this may cause disorder when concurrently starting multiple AutoML processes\nwith the same experiment name if the MLflow version is less than or equal to "2.5.0".'),(0,a.yg)("h4",{id:"retrain"},"retrain"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"def retrain(train_func, config)\n")),(0,a.yg)("p",null,"retrain with given config, added for logging the best config and model to parent run.\nNo more needed after v2.0.2post2 as we no longer log best config and model to parent run."))}s.isMDXComponent=!0}}]);