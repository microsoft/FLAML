"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4261],{5680:(e,t,a)=>{a.d(t,{xA:()=>p,yg:()=>u});var r=a(6540);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=r.createContext({}),g=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=g(e.components);return r.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=g(a),u=n,f=c["".concat(o,".").concat(u)]||c[u]||m[u]||i;return a?r.createElement(f,l(l({ref:t},p),{},{components:a})):r.createElement(f,l({ref:t},p))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:n,l[1]=s;for(var g=2;g<i;g++)l[g]=a[g];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},7896:(e,t,a)=>{a.r(t),a.d(t,{contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>o});var r=a(8168),n=(a(6540),a(5680));const i={sidebar_label:"suggest",title:"default.suggest"},l=void 0,s={unversionedId:"reference/default/suggest",id:"reference/default/suggest",isDocsHomePage:!1,title:"default.suggest",description:"suggest\\_config",source:"@site/docs/reference/default/suggest.md",sourceDirName:"reference/default",slug:"/reference/default/suggest",permalink:"/FLAML/docs/reference/default/suggest",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/default/suggest.md",tags:[],version:"current",frontMatter:{sidebar_label:"suggest",title:"default.suggest"},sidebar:"referenceSideBar",previous:{title:"portfolio",permalink:"/FLAML/docs/reference/default/portfolio"},next:{title:"mlflow",permalink:"/FLAML/docs/reference/fabric/mlflow"}},o=[{value:"suggest_config",id:"suggest_config",children:[],level:4},{value:"suggest_learner",id:"suggest_learner",children:[],level:4},{value:"suggest_hyperparams",id:"suggest_hyperparams",children:[],level:4},{value:"preprocess_and_suggest_hyperparams",id:"preprocess_and_suggest_hyperparams",children:[],level:4}],g={toc:o};function p(e){let{components:t,...a}=e;return(0,n.yg)("wrapper",(0,r.A)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h4",{id:"suggest_config"},"suggest","_","config"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"def suggest_config(task,\n                   X,\n                   y,\n                   estimator_or_predictor,\n                   location=None,\n                   k=None,\n                   meta_feature_fn=meta_feature)\n")),(0,n.yg)("p",null,"Suggest a list of configs for the given task and training data."),(0,n.yg)("p",null,"The returned configs can be used as starting points for AutoML.fit().\n",(0,n.yg)("inlineCode",{parentName:"p"},"FLAML_sample_size")," is removed from the configs."),(0,n.yg)("h4",{id:"suggest_learner"},"suggest","_","learner"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},'def suggest_learner(task,\n                    X,\n                    y,\n                    estimator_or_predictor="all",\n                    estimator_list=None,\n                    location=None)\n')),(0,n.yg)("p",null,"Suggest best learner within estimator_list."),(0,n.yg)("h4",{id:"suggest_hyperparams"},"suggest","_","hyperparams"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"def suggest_hyperparams(task, X, y, estimator_or_predictor, location=None)\n")),(0,n.yg)("p",null,"Suggest hyperparameter configurations and an estimator class."),(0,n.yg)("p",null,"The configurations can be used to initialize the estimator class like lightgbm.LGBMRegressor."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Example"),":"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},'hyperparams, estimator_class = suggest_hyperparams("regression", X_train, y_train, "lgbm")\nmodel = estimator_class(**hyperparams)  # estimator_class is LGBMRegressor\nmodel.fit(X_train, y_train)\n')),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"task")," - A string of the task type, e.g.,\n'classification', 'regression', 'ts_forecast', 'rank',\n'seq-classification', 'seq-regression'."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"X")," - A dataframe of training data in shape n*m.\nFor 'ts_forecast' task, the first column of X_train\nmust be the timestamp column (datetime type). Other\ncolumns in the dataframe are assumed to be exogenous\nvariables (categorical or numeric)."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"y")," - A series of labels in shape n*1."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"estimator_or_predictor")," - A str of the learner name or a dict of the learned config predictor.\nIf a dict, it contains:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},'"version": a str of the version number.'),(0,n.yg)("li",{parentName:"ul"},'"preprocessing": a dictionary containing:')),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},'"center": a list of meta feature value offsets for normalization.'),(0,n.yg)("li",{parentName:"ul"},'"scale": a list of meta feature scales to normalize each dimension.')),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},'"neighbors": a list of dictionaries. Each dictionary contains:')),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},'"features": a list of the normalized meta features for a neighbor.'),(0,n.yg)("li",{parentName:"ul"},'"choice": an integer of the configuration id in the portfolio.')),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},'"portfolio": a list of dictionaries, each corresponding to a configuration:')),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},'"class": a str of the learner name.'),(0,n.yg)("li",{parentName:"ul"},'"hyperparameters": a dict of the config. The key "FLAML_sample_size" will be ignored.'))),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"location")," - (Optional) A str of the location containing mined portfolio file.\nOnly valid when the portfolio is a str, by default the location is flaml/default.")),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Returns"),":"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"hyperparams")," - A dict of the hyperparameter configurations."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"estiamtor_class")," - A class of the underlying estimator, e.g., lightgbm.LGBMClassifier.")),(0,n.yg)("h4",{id:"preprocess_and_suggest_hyperparams"},"preprocess","_","and","_","suggest","_","hyperparams"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"def preprocess_and_suggest_hyperparams(task,\n                                       X,\n                                       y,\n                                       estimator_or_predictor,\n                                       location=None)\n")),(0,n.yg)("p",null,"Preprocess the data and suggest hyperparameters."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Example"),":"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},'hyperparams, estimator_class, X, y, feature_transformer, label_transformer =         preprocess_and_suggest_hyperparams("classification", X_train, y_train, "xgb_limitdepth")\nmodel = estimator_class(**hyperparams)  # estimator_class is XGBClassifier\nmodel.fit(X, y)\nX_test = feature_transformer.transform(X_test)\ny_pred = label_transformer.inverse_transform(pd.Series(model.predict(X_test).astype(int)))\n')),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"task")," - A string of the task type, e.g.,\n'classification', 'regression', 'ts_forecast', 'rank',\n'seq-classification', 'seq-regression'."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"X")," - A dataframe of training data in shape n*m.\nFor 'ts_forecast' task, the first column of X_train\nmust be the timestamp column (datetime type). Other\ncolumns in the dataframe are assumed to be exogenous\nvariables (categorical or numeric)."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"y")," - A series of labels in shape n*1."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"estimator_or_predictor"),' - A str of the learner name or a dict of the learned config predictor.\n"choose_xgb" means choosing between xgb_limitdepth and xgboost.\nIf a dict, it contains:',(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},'"version": a str of the version number.'),(0,n.yg)("li",{parentName:"ul"},'"preprocessing": a dictionary containing:')),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},'"center": a list of meta feature value offsets for normalization.'),(0,n.yg)("li",{parentName:"ul"},'"scale": a list of meta feature scales to normalize each dimension.')),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},'"neighbors": a list of dictionaries. Each dictionary contains:')),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},'"features": a list of the normalized meta features for a neighbor.'),(0,n.yg)("li",{parentName:"ul"},'"choice": a integer of the configuration id in the portfolio.')),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},'"portfolio": a list of dictionaries, each corresponding to a configuration:')),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},'"class": a str of the learner name.'),(0,n.yg)("li",{parentName:"ul"},'"hyperparameters": a dict of the config. They key "FLAML_sample_size" will be ignored.'))),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"location")," - (Optional) A str of the location containing mined portfolio file.\nOnly valid when the portfolio is a str, by default the location is flaml/default.")),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Returns"),":"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"hyperparams")," - A dict of the hyperparameter configurations."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"estiamtor_class")," - A class of the underlying estimator, e.g., lightgbm.LGBMClassifier."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"X")," - the preprocessed X."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"y")," - the preprocessed y."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"feature_transformer")," - a data transformer that can be applied to X_test."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"label_transformer")," - a label transformer that can be applied to y_test.")))}p.isMDXComponent=!0}}]);