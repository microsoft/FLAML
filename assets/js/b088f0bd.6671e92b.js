"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8445],{5680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>m});var a=t(6540);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=a.createContext({}),g=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=g(e.components);return a.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=g(t),m=l,y=u["".concat(s,".").concat(m)]||u[m]||c[m]||i;return t?a.createElement(y,r(r({ref:n},p),{},{components:t})):a.createElement(y,r({ref:n},p))}));function m(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=t.length,r=new Array(i);r[0]=u;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var g=2;g<i;g++)r[g]=t[g];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},528:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=t(8168),l=(t(6540),t(5680));const i={sidebar_label:"conversable_agent",title:"autogen.agentchat.conversable_agent"},r=void 0,o={unversionedId:"reference/autogen/agentchat/conversable_agent",id:"reference/autogen/agentchat/conversable_agent",isDocsHomePage:!1,title:"autogen.agentchat.conversable_agent",description:"ConversableAgent Objects",source:"@site/docs/reference/autogen/agentchat/conversable_agent.md",sourceDirName:"reference/autogen/agentchat",slug:"/reference/autogen/agentchat/conversable_agent",permalink:"/FLAML/docs/reference/autogen/agentchat/conversable_agent",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/autogen/agentchat/conversable_agent.md",tags:[],version:"current",frontMatter:{sidebar_label:"conversable_agent",title:"autogen.agentchat.conversable_agent"},sidebar:"referenceSideBar",previous:{title:"assistant_agent",permalink:"/FLAML/docs/reference/autogen/agentchat/assistant_agent"},next:{title:"groupchat",permalink:"/FLAML/docs/reference/autogen/agentchat/groupchat"}},s=[{value:"ConversableAgent Objects",id:"conversableagent-objects",children:[{value:"MAX_CONSECUTIVE_AUTO_REPLY",id:"max_consecutive_auto_reply",children:[],level:4},{value:"__init__",id:"__init__",children:[],level:4},{value:"register_reply",id:"register_reply",children:[],level:4},{value:"system_message",id:"system_message",children:[],level:4},{value:"update_system_message",id:"update_system_message",children:[],level:4},{value:"update_max_consecutive_auto_reply",id:"update_max_consecutive_auto_reply",children:[],level:4},{value:"max_consecutive_auto_reply",id:"max_consecutive_auto_reply-1",children:[],level:4},{value:"chat_messages",id:"chat_messages",children:[],level:4},{value:"last_message",id:"last_message",children:[],level:4},{value:"use_docker",id:"use_docker",children:[],level:4},{value:"send",id:"send",children:[],level:4},{value:"a_send",id:"a_send",children:[],level:4},{value:"receive",id:"receive",children:[],level:4},{value:"a_receive",id:"a_receive",children:[],level:4},{value:"initiate_chat",id:"initiate_chat",children:[],level:4},{value:"a_initiate_chat",id:"a_initiate_chat",children:[],level:4},{value:"reset",id:"reset",children:[],level:4},{value:"stop_reply_at_receive",id:"stop_reply_at_receive",children:[],level:4},{value:"reset_consecutive_auto_reply_counter",id:"reset_consecutive_auto_reply_counter",children:[],level:4},{value:"clear_history",id:"clear_history",children:[],level:4},{value:"generate_oai_reply",id:"generate_oai_reply",children:[],level:4},{value:"generate_code_execution_reply",id:"generate_code_execution_reply",children:[],level:4},{value:"generate_function_call_reply",id:"generate_function_call_reply",children:[],level:4},{value:"check_termination_and_human_reply",id:"check_termination_and_human_reply",children:[],level:4},{value:"generate_reply",id:"generate_reply",children:[],level:4},{value:"a_generate_reply",id:"a_generate_reply",children:[],level:4},{value:"get_human_input",id:"get_human_input",children:[],level:4},{value:"run_code",id:"run_code",children:[],level:4},{value:"execute_code_blocks",id:"execute_code_blocks",children:[],level:4},{value:"execute_function",id:"execute_function",children:[],level:4},{value:"generate_init_message",id:"generate_init_message",children:[],level:4},{value:"register_function",id:"register_function",children:[],level:4}],level:2}],g={toc:s};function p(e){let{components:n,...t}=e;return(0,l.yg)("wrapper",(0,a.A)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,l.yg)("h2",{id:"conversableagent-objects"},"ConversableAgent Objects"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"class ConversableAgent(Agent)\n")),(0,l.yg)("p",null,"(In preview) A class for generic conversable agents which can be configured as assistant or user proxy."),(0,l.yg)("p",null,"After receiving each message, the agent will send a reply to the sender unless the msg is a termination msg.\nFor example, AssistantAgent and UserProxyAgent are subclasses of this class,\nconfigured with different default settings."),(0,l.yg)("p",null,"To modify auto reply, override ",(0,l.yg)("inlineCode",{parentName:"p"},"generate_reply")," method.\nTo disable/enable human response in every turn, set ",(0,l.yg)("inlineCode",{parentName:"p"},"human_input_mode"),' to "NEVER" or "ALWAYS".\nTo modify the way to get human input, override ',(0,l.yg)("inlineCode",{parentName:"p"},"get_human_input")," method.\nTo modify the way to execute code blocks, single code block, or function call, override ",(0,l.yg)("inlineCode",{parentName:"p"},"execute_code_blocks"),",\n",(0,l.yg)("inlineCode",{parentName:"p"},"run_code"),", and ",(0,l.yg)("inlineCode",{parentName:"p"},"execute_function")," methods respectively.\nTo customize the initial message when a conversation starts, override ",(0,l.yg)("inlineCode",{parentName:"p"},"generate_init_message")," method."),(0,l.yg)("h4",{id:"max_consecutive_auto_reply"},"MAX","_","CONSECUTIVE","_","AUTO","_","REPLY"),(0,l.yg)("p",null,"maximum number of consecutive auto replies (subject to future change)"),(0,l.yg)("h4",{id:"__init__"},"_","_","init","_","_"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},'def __init__(name: str,\n             system_message: Optional[str] = "You are a helpful AI Assistant.",\n             is_termination_msg: Optional[Callable[[Dict], bool]] = None,\n             max_consecutive_auto_reply: Optional[int] = None,\n             human_input_mode: Optional[str] = "TERMINATE",\n             function_map: Optional[Dict[str, Callable]] = None,\n             code_execution_config: Optional[Union[Dict, bool]] = None,\n             llm_config: Optional[Union[Dict, bool]] = None,\n             default_auto_reply: Optional[Union[str, Dict, None]] = "")\n')),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"name")," ",(0,l.yg)("em",{parentName:"li"},"str")," - name of the agent."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"system_message")," ",(0,l.yg)("em",{parentName:"li"},"str")," - system message for the ChatCompletion inference."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"is_termination_msg")," ",(0,l.yg)("em",{parentName:"li"},"function"),' - a function that takes a message in the form of a dictionary\nand returns a boolean value indicating if this received message is a termination message.\nThe dict can contain the following keys: "content", "role", "name", "function_call".'),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"max_consecutive_auto_reply")," ",(0,l.yg)("em",{parentName:"li"},"int")," - the maximum number of consecutive auto replies.\ndefault to None (no limit provided, class attribute MAX_CONSECUTIVE_AUTO_REPLY will be used as the limit in this case).\nWhen set to 0, no auto reply will be generated."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"human_input_mode")," ",(0,l.yg)("em",{parentName:"li"},"str"),' - whether to ask for human inputs every time a message is received.\nPossible values are "ALWAYS", "TERMINATE", "NEVER".\n(1) When "ALWAYS", the agent prompts for human input every time a message is received.\nUnder this mode, the conversation stops when the human input is "exit",\nor when is_termination_msg is True and there is no human input.\n(2) When "TERMINATE", the agent only prompts for human input only when a termination message is received or\nthe number of auto reply reaches the max_consecutive_auto_reply.\n(3) When "NEVER", the agent will never prompt for human input. Under this mode, the conversation stops\nwhen the number of auto reply reaches the max_consecutive_auto_reply or when is_termination_msg is True.'),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"function_map")," ",(0,l.yg)("em",{parentName:"li"},"dict","[str, callable]")," - Mapping function names (passed to openai) to callable functions."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"code_execution_config")," ",(0,l.yg)("em",{parentName:"li"},"dict or False")," - config for the code execution.\nTo disable code execution, set to False. Otherwise, set to a dictionary with the following keys:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},'work_dir (Optional, str): The working directory for the code execution.\nIf None, a default working directory will be used.\nThe default working directory is the "extensions" directory under\n"path_to_flaml/autogen".'),(0,l.yg)("li",{parentName:"ul"},"use_docker (Optional, list, str or bool): The docker image to use for code execution.\nIf a list or a str of image name(s) is provided, the code will be executed in a docker container\nwith the first image successfully pulled.\nIf None, False or empty, the code will be executed in the current environment.\nDefault is True, which will be converted into a list.\nIf the code is executed in the current environment,\nthe code must be trusted."),(0,l.yg)("li",{parentName:"ul"},"timeout (Optional, int): The maximum execution time in seconds."),(0,l.yg)("li",{parentName:"ul"},"last_n_messages (Experimental, Optional, int): The number of messages to look back for code execution. Default to 1."))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"llm_config")," ",(0,l.yg)("em",{parentName:"li"},"dict or False")," - llm inference configuration.\nPlease refer to ",(0,l.yg)("a",{parentName:"li",href:"/docs/reference/autogen/oai/completion#create"},"autogen.Completion.create"),"\nfor available options.\nTo disable llm-based auto reply, set to False."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"default_auto_reply")," ",(0,l.yg)("em",{parentName:"li"},"str or dict or None")," - default auto reply when no code execution or llm-based reply is generated.")),(0,l.yg)("h4",{id:"register_reply"},"register","_","reply"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def register_reply(trigger: Union[Type[Agent], str, Agent,\n                                  Callable[[Agent], bool], List],\n                   reply_func: Callable,\n                   position: Optional[int] = 0,\n                   config: Optional[Any] = None,\n                   reset_config: Optional[Callable] = None)\n")),(0,l.yg)("p",null,"Register a reply function."),(0,l.yg)("p",null,"The reply function will be called when the trigger matches the sender.\nThe function registered later will be checked earlier by default.\nTo change the order, set the position to a positive integer."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"trigger")," ",(0,l.yg)("em",{parentName:"li"},"Agent class, str, Agent instance, callable, or list")," - the trigger.",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"If a class is provided, the reply function will be called when the sender is an instance of the class."),(0,l.yg)("li",{parentName:"ul"},"If a string is provided, the reply function will be called when the sender's name matches the string."),(0,l.yg)("li",{parentName:"ul"},"If an agent instance is provided, the reply function will be called when the sender is the agent instance."),(0,l.yg)("li",{parentName:"ul"},"If a callable is provided, the reply function will be called when the callable returns True."),(0,l.yg)("li",{parentName:"ul"},"If a list is provided, the reply function will be called when any of the triggers in the list is activated."),(0,l.yg)("li",{parentName:"ul"},"If None is provided, the reply function will be called only when the sender is None."))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"Note")," - Be sure to register ",(0,l.yg)("inlineCode",{parentName:"li"},"None")," as a trigger if you would like to trigger an auto-reply function with non-empty messages and ",(0,l.yg)("inlineCode",{parentName:"li"},"sender=None"),"."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"reply_func")," ",(0,l.yg)("em",{parentName:"li"},"Callable")," - the reply function.\nThe function takes a recipient agent, a list of messages, a sender agent and a config as input and returns a reply message.")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def reply_func(\n    recipient: ConversableAgent,\n    messages: Optional[List[Dict]] = None,\n    sender: Optional[Agent] = None,\n    config: Optional[Any] = None,\n) -> Union[str, Dict, None]:\n")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"position")," ",(0,l.yg)("em",{parentName:"li"},"int")," - the position of the reply function in the reply function list.\nThe function registered later will be checked earlier by default.\nTo change the order, set the position to a positive integer."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"config")," ",(0,l.yg)("em",{parentName:"li"},"Any")," - the config to be passed to the reply function.\nWhen an agent is reset, the config will be reset to the original value."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"reset_config")," ",(0,l.yg)("em",{parentName:"li"},"Callable")," - the function to reset the config.\nThe function returns None. Signature: ",(0,l.yg)("inlineCode",{parentName:"li"},"def reset_config(config: Any)"))),(0,l.yg)("h4",{id:"system_message"},"system","_","message"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"@property\ndef system_message()\n")),(0,l.yg)("p",null,"Return the system message."),(0,l.yg)("h4",{id:"update_system_message"},"update","_","system","_","message"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def update_system_message(system_message: str)\n")),(0,l.yg)("p",null,"Update the system message."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"system_message")," ",(0,l.yg)("em",{parentName:"li"},"str")," - system message for the ChatCompletion inference.")),(0,l.yg)("h4",{id:"update_max_consecutive_auto_reply"},"update","_","max","_","consecutive","_","auto","_","reply"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def update_max_consecutive_auto_reply(value: int,\n                                      sender: Optional[Agent] = None)\n")),(0,l.yg)("p",null,"Update the maximum number of consecutive auto replies."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"value")," ",(0,l.yg)("em",{parentName:"li"},"int")," - the maximum number of consecutive auto replies."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"sender")," ",(0,l.yg)("em",{parentName:"li"},"Agent")," - when the sender is provided, only update the max_consecutive_auto_reply for that sender.")),(0,l.yg)("h4",{id:"max_consecutive_auto_reply-1"},"max","_","consecutive","_","auto","_","reply"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def max_consecutive_auto_reply(sender: Optional[Agent] = None) -> int\n")),(0,l.yg)("p",null,"The maximum number of consecutive auto replies."),(0,l.yg)("h4",{id:"chat_messages"},"chat","_","messages"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"@property\ndef chat_messages() -> Dict[str, List[Dict]]\n")),(0,l.yg)("p",null,"A dictionary of conversations from name to list of ChatCompletion messages."),(0,l.yg)("h4",{id:"last_message"},"last","_","message"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def last_message(agent: Optional[Agent] = None) -> Dict\n")),(0,l.yg)("p",null,"The last message exchanged with the agent."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"agent")," ",(0,l.yg)("em",{parentName:"li"},"Agent")," - The agent in the conversation.\nIf None and more than one agent's conversations are found, an error will be raised.\nIf None and only one conversation is found, the last message of the only conversation will be returned.")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Returns"),":"),(0,l.yg)("p",null,"  The last message exchanged with the agent."),(0,l.yg)("h4",{id:"use_docker"},"use","_","docker"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"@property\ndef use_docker() -> Union[bool, str, None]\n")),(0,l.yg)("p",null,"Bool value of whether to use docker to execute the code,\nor str value of the docker image name to use, or None when code execution is disabled."),(0,l.yg)("h4",{id:"send"},"send"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def send(message: Union[Dict, str],\n         recipient: Agent,\n         request_reply: Optional[bool] = None,\n         silent: Optional[bool] = False) -> bool\n")),(0,l.yg)("p",null,"Send a message to another agent."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"message")," ",(0,l.yg)("em",{parentName:"li"},"dict or str")," - message to be sent.\nThe message could contain the following fields (either content or function_call must be provided):",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"content (str): the content of the message."),(0,l.yg)("li",{parentName:"ul"},"function_call (str): the name of the function to be called."),(0,l.yg)("li",{parentName:"ul"},"name (str): the name of the function to be called."),(0,l.yg)("li",{parentName:"ul"},'role (str): the role of the message, any role that is not "function"\nwill be modified to "assistant".'),(0,l.yg)("li",{parentName:"ul"},"context (dict): the context of the message, which will be passed to\n",(0,l.yg)("a",{parentName:"li",href:"../oai/Completion#create"},"autogen.Completion.create"),".\nFor example, one agent can send a message A as:")))),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},'{\n    "content": lambda context: context["use_tool_msg"],\n    "context": {\n        "use_tool_msg": "Use tool X if they are relevant."\n    }\n}\n')),(0,l.yg)("p",null,'  Next time, one agent can send a message B with a different "use_tool_msg".\nThen the content of message A will be refreshed to the new "use_tool_msg".\nSo effectively, this provides a way for an agent to send a "link" and modify\nthe content of the "link" later.'),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"recipient")," ",(0,l.yg)("em",{parentName:"li"},"Agent")," - the recipient of the message."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"request_reply")," ",(0,l.yg)("em",{parentName:"li"},"bool or None")," - whether to request a reply from the recipient."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"silent")," ",(0,l.yg)("em",{parentName:"li"},"bool or None")," - (Experimental) whether to print the message sent.")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Raises"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"ValueError")," - if the message can't be converted into a valid ChatCompletion message.")),(0,l.yg)("h4",{id:"a_send"},"a","_","send"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"async def a_send(message: Union[Dict, str],\n                 recipient: Agent,\n                 request_reply: Optional[bool] = None,\n                 silent: Optional[bool] = False) -> bool\n")),(0,l.yg)("p",null,"(async) Send a message to another agent."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"message")," ",(0,l.yg)("em",{parentName:"li"},"dict or str")," - message to be sent.\nThe message could contain the following fields (either content or function_call must be provided):",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"content (str): the content of the message."),(0,l.yg)("li",{parentName:"ul"},"function_call (str): the name of the function to be called."),(0,l.yg)("li",{parentName:"ul"},"name (str): the name of the function to be called."),(0,l.yg)("li",{parentName:"ul"},'role (str): the role of the message, any role that is not "function"\nwill be modified to "assistant".'),(0,l.yg)("li",{parentName:"ul"},"context (dict): the context of the message, which will be passed to\n",(0,l.yg)("a",{parentName:"li",href:"../oai/Completion#create"},"autogen.Completion.create"),".\nFor example, one agent can send a message A as:")))),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},'{\n    "content": lambda context: context["use_tool_msg"],\n    "context": {\n        "use_tool_msg": "Use tool X if they are relevant."\n    }\n}\n')),(0,l.yg)("p",null,'  Next time, one agent can send a message B with a different "use_tool_msg".\nThen the content of message A will be refreshed to the new "use_tool_msg".\nSo effectively, this provides a way for an agent to send a "link" and modify\nthe content of the "link" later.'),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"recipient")," ",(0,l.yg)("em",{parentName:"li"},"Agent")," - the recipient of the message."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"request_reply")," ",(0,l.yg)("em",{parentName:"li"},"bool or None")," - whether to request a reply from the recipient."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"silent")," ",(0,l.yg)("em",{parentName:"li"},"bool or None")," - (Experimental) whether to print the message sent.")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Raises"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"ValueError")," - if the message can't be converted into a valid ChatCompletion message.")),(0,l.yg)("h4",{id:"receive"},"receive"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def receive(message: Union[Dict, str],\n            sender: Agent,\n            request_reply: Optional[bool] = None,\n            silent: Optional[bool] = False)\n")),(0,l.yg)("p",null,"Receive a message from another agent."),(0,l.yg)("p",null,"Once a message is received, this function sends a reply to the sender or stop.\nThe reply can be generated automatically or entered manually by a human."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"message")," ",(0,l.yg)("em",{parentName:"li"},"dict or str")," - message from the sender. If the type is dict, it may contain the following reserved fields (either content or function_call need to be provided).",(0,l.yg)("ol",{parentName:"li"},(0,l.yg)("li",{parentName:"ol"},'"content": content of the message, can be None.'),(0,l.yg)("li",{parentName:"ol"},'"function_call": a dictionary containing the function name and arguments.'),(0,l.yg)("li",{parentName:"ol"},'"role": role of the message, can be "assistant", "user", "function".\nThis field is only needed to distinguish between "function" or "assistant"/"user".'),(0,l.yg)("li",{parentName:"ol"},'"name": In most cases, this field is not needed. When the role is "function", this field is needed to indicate the function name.'),(0,l.yg)("li",{parentName:"ol"},'"context" (dict): the context of the message, which will be passed to\n',(0,l.yg)("a",{parentName:"li",href:"../oai/Completion#create"},"autogen.Completion.create"),"."))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"sender")," - sender of an Agent instance."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"request_reply")," ",(0,l.yg)("em",{parentName:"li"},"bool or None")," - whether a reply is requested from the sender.\nIf None, the value is determined by ",(0,l.yg)("inlineCode",{parentName:"li"},"self.reply_at_receive[sender]"),"."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"silent")," ",(0,l.yg)("em",{parentName:"li"},"bool or None")," - (Experimental) whether to print the message received.")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Raises"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"ValueError")," - if the message can't be converted into a valid ChatCompletion message.")),(0,l.yg)("h4",{id:"a_receive"},"a","_","receive"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"async def a_receive(message: Union[Dict, str],\n                    sender: Agent,\n                    request_reply: Optional[bool] = None,\n                    silent: Optional[bool] = False)\n")),(0,l.yg)("p",null,"(async) Receive a message from another agent."),(0,l.yg)("p",null,"Once a message is received, this function sends a reply to the sender or stop.\nThe reply can be generated automatically or entered manually by a human."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"message")," ",(0,l.yg)("em",{parentName:"li"},"dict or str")," - message from the sender. If the type is dict, it may contain the following reserved fields (either content or function_call need to be provided).",(0,l.yg)("ol",{parentName:"li"},(0,l.yg)("li",{parentName:"ol"},'"content": content of the message, can be None.'),(0,l.yg)("li",{parentName:"ol"},'"function_call": a dictionary containing the function name and arguments.'),(0,l.yg)("li",{parentName:"ol"},'"role": role of the message, can be "assistant", "user", "function".\nThis field is only needed to distinguish between "function" or "assistant"/"user".'),(0,l.yg)("li",{parentName:"ol"},'"name": In most cases, this field is not needed. When the role is "function", this field is needed to indicate the function name.'),(0,l.yg)("li",{parentName:"ol"},'"context" (dict): the context of the message, which will be passed to\n',(0,l.yg)("a",{parentName:"li",href:"../oai/Completion#create"},"autogen.Completion.create"),"."))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"sender")," - sender of an Agent instance."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"request_reply")," ",(0,l.yg)("em",{parentName:"li"},"bool or None")," - whether a reply is requested from the sender.\nIf None, the value is determined by ",(0,l.yg)("inlineCode",{parentName:"li"},"self.reply_at_receive[sender]"),"."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"silent")," ",(0,l.yg)("em",{parentName:"li"},"bool or None")," - (Experimental) whether to print the message received.")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Raises"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"ValueError")," - if the message can't be converted into a valid ChatCompletion message.")),(0,l.yg)("h4",{id:"initiate_chat"},"initiate","_","chat"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},'def initiate_chat(recipient: "ConversableAgent",\n                  clear_history: Optional[bool] = True,\n                  silent: Optional[bool] = False,\n                  **context)\n')),(0,l.yg)("p",null,"Initiate a chat with the recipient agent."),(0,l.yg)("p",null,"Reset the consecutive auto reply counter.\nIf ",(0,l.yg)("inlineCode",{parentName:"p"},"clear_history")," is True, the chat history with the recipient agent will be cleared.\n",(0,l.yg)("inlineCode",{parentName:"p"},"generate_init_message")," is called to generate the initial message for the agent."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"recipient")," - the recipient agent."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"clear_history")," ",(0,l.yg)("em",{parentName:"li"},"bool")," - whether to clear the chat history with the agent."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"silent")," ",(0,l.yg)("em",{parentName:"li"},"bool or None")," - (Experimental) whether to print the messages for this conversation."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"**context"),' - any context information.\n"message" needs to be provided if the ',(0,l.yg)("inlineCode",{parentName:"li"},"generate_init_message")," method is not overridden.")),(0,l.yg)("h4",{id:"a_initiate_chat"},"a","_","initiate","_","chat"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},'async def a_initiate_chat(recipient: "ConversableAgent",\n                          clear_history: Optional[bool] = True,\n                          silent: Optional[bool] = False,\n                          **context)\n')),(0,l.yg)("p",null,"(async) Initiate a chat with the recipient agent."),(0,l.yg)("p",null,"Reset the consecutive auto reply counter.\nIf ",(0,l.yg)("inlineCode",{parentName:"p"},"clear_history")," is True, the chat history with the recipient agent will be cleared.\n",(0,l.yg)("inlineCode",{parentName:"p"},"generate_init_message")," is called to generate the initial message for the agent."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"recipient")," - the recipient agent."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"clear_history")," ",(0,l.yg)("em",{parentName:"li"},"bool")," - whether to clear the chat history with the agent."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"silent")," ",(0,l.yg)("em",{parentName:"li"},"bool or None")," - (Experimental) whether to print the messages for this conversation."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"**context"),' - any context information.\n"message" needs to be provided if the ',(0,l.yg)("inlineCode",{parentName:"li"},"generate_init_message")," method is not overridden.")),(0,l.yg)("h4",{id:"reset"},"reset"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def reset()\n")),(0,l.yg)("p",null,"Reset the agent."),(0,l.yg)("h4",{id:"stop_reply_at_receive"},"stop","_","reply","_","at","_","receive"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def stop_reply_at_receive(sender: Optional[Agent] = None)\n")),(0,l.yg)("p",null,"Reset the reply_at_receive of the sender."),(0,l.yg)("h4",{id:"reset_consecutive_auto_reply_counter"},"reset","_","consecutive","_","auto","_","reply","_","counter"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def reset_consecutive_auto_reply_counter(sender: Optional[Agent] = None)\n")),(0,l.yg)("p",null,"Reset the consecutive_auto_reply_counter of the sender."),(0,l.yg)("h4",{id:"clear_history"},"clear","_","history"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def clear_history(agent: Optional[Agent] = None)\n")),(0,l.yg)("p",null,"Clear the chat history of the agent."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"agent")," - the agent with whom the chat history to clear. If None, clear the chat history with all agents.")),(0,l.yg)("h4",{id:"generate_oai_reply"},"generate","_","oai","_","reply"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def generate_oai_reply(\n        messages: Optional[List[Dict]] = None,\n        sender: Optional[Agent] = None,\n        config: Optional[Any] = None) -> Tuple[bool, Union[str, Dict, None]]\n")),(0,l.yg)("p",null,"Generate a reply using autogen.oai."),(0,l.yg)("h4",{id:"generate_code_execution_reply"},"generate","_","code","_","execution","_","reply"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def generate_code_execution_reply(messages: Optional[List[Dict]] = None,\n                                  sender: Optional[Agent] = None,\n                                  config: Optional[Any] = None)\n")),(0,l.yg)("p",null,"Generate a reply using code execution."),(0,l.yg)("h4",{id:"generate_function_call_reply"},"generate","_","function","_","call","_","reply"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def generate_function_call_reply(messages: Optional[List[Dict]] = None,\n                                 sender: Optional[Agent] = None,\n                                 config: Optional[Any] = None)\n")),(0,l.yg)("p",null,"Generate a reply using function call."),(0,l.yg)("h4",{id:"check_termination_and_human_reply"},"check","_","termination","_","and","_","human","_","reply"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def check_termination_and_human_reply(\n        messages: Optional[List[Dict]] = None,\n        sender: Optional[Agent] = None,\n        config: Optional[Any] = None) -> Tuple[bool, Union[str, Dict, None]]\n")),(0,l.yg)("p",null,"Check if the conversation should be terminated, and if human reply is provided."),(0,l.yg)("h4",{id:"generate_reply"},"generate","_","reply"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def generate_reply(\n        messages: Optional[List[Dict]] = None,\n        sender: Optional[Agent] = None,\n        exclude: Optional[List[Callable]] = None) -> Union[str, Dict, None]\n")),(0,l.yg)("p",null,"Reply based on the conversation history and the sender."),(0,l.yg)("p",null,"Either messages or sender must be provided.\nRegister a reply_func with ",(0,l.yg)("inlineCode",{parentName:"p"},"None")," as one trigger for it to be activated when ",(0,l.yg)("inlineCode",{parentName:"p"},"messages")," is non-empty and ",(0,l.yg)("inlineCode",{parentName:"p"},"sender")," is ",(0,l.yg)("inlineCode",{parentName:"p"},"None"),".\nUse registered auto reply functions to generate replies.\nBy default, the following functions are checked in order:"),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},"check_termination_and_human_reply"),(0,l.yg)("li",{parentName:"ol"},"generate_function_call_reply"),(0,l.yg)("li",{parentName:"ol"},"generate_code_execution_reply"),(0,l.yg)("li",{parentName:"ol"},"generate_oai_reply\nEvery function returns a tuple (final, reply).\nWhen a function returns final=False, the next function will be checked.\nSo by default, termination and human reply will be checked first.\nIf not terminating and human reply is skipped, execute function or code and return the result.\nAI replies are generated only when no code execution is performed.")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"messages")," - a list of messages in the conversation history."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"default_reply")," ",(0,l.yg)("em",{parentName:"li"},"str or dict")," - default reply."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"sender")," - sender of an Agent instance."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"exclude")," - a list of functions to exclude.")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Returns"),":"),(0,l.yg)("p",null,"  str or dict or None: reply. None if no reply is generated."),(0,l.yg)("h4",{id:"a_generate_reply"},"a","_","generate","_","reply"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"async def a_generate_reply(\n        messages: Optional[List[Dict]] = None,\n        sender: Optional[Agent] = None,\n        exclude: Optional[List[Callable]] = None) -> Union[str, Dict, None]\n")),(0,l.yg)("p",null,"(async) Reply based on the conversation history and the sender."),(0,l.yg)("p",null,"Either messages or sender must be provided.\nRegister a reply_func with ",(0,l.yg)("inlineCode",{parentName:"p"},"None")," as one trigger for it to be activated when ",(0,l.yg)("inlineCode",{parentName:"p"},"messages")," is non-empty and ",(0,l.yg)("inlineCode",{parentName:"p"},"sender")," is ",(0,l.yg)("inlineCode",{parentName:"p"},"None"),".\nUse registered auto reply functions to generate replies.\nBy default, the following functions are checked in order:"),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},"check_termination_and_human_reply"),(0,l.yg)("li",{parentName:"ol"},"generate_function_call_reply"),(0,l.yg)("li",{parentName:"ol"},"generate_code_execution_reply"),(0,l.yg)("li",{parentName:"ol"},"generate_oai_reply\nEvery function returns a tuple (final, reply).\nWhen a function returns final=False, the next function will be checked.\nSo by default, termination and human reply will be checked first.\nIf not terminating and human reply is skipped, execute function or code and return the result.\nAI replies are generated only when no code execution is performed.")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"messages")," - a list of messages in the conversation history."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"default_reply")," ",(0,l.yg)("em",{parentName:"li"},"str or dict")," - default reply."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"sender")," - sender of an Agent instance."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"exclude")," - a list of functions to exclude.")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Returns"),":"),(0,l.yg)("p",null,"  str or dict or None: reply. None if no reply is generated."),(0,l.yg)("h4",{id:"get_human_input"},"get","_","human","_","input"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def get_human_input(prompt: str) -> str\n")),(0,l.yg)("p",null,"Get human input."),(0,l.yg)("p",null,"Override this method to customize the way to get human input."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"prompt")," ",(0,l.yg)("em",{parentName:"li"},"str")," - prompt for the human input.")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Returns"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"str")," - human input.")),(0,l.yg)("h4",{id:"run_code"},"run","_","code"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def run_code(code, **kwargs)\n")),(0,l.yg)("p",null,"Run the code and return the result."),(0,l.yg)("p",null,"Override this function to modify the way to run the code."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"code")," ",(0,l.yg)("em",{parentName:"li"},"str")," - the code to be executed."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"**kwargs")," - other keyword arguments.")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Returns"),":"),(0,l.yg)("p",null,"  A tuple of (exitcode, logs, image)."),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"exitcode")," ",(0,l.yg)("em",{parentName:"li"},"int")," - the exit code of the code execution."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"logs")," ",(0,l.yg)("em",{parentName:"li"},"str")," - the logs of the code execution."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"image")," ",(0,l.yg)("em",{parentName:"li"},"str or None")," - the docker image used for the code execution.")),(0,l.yg)("h4",{id:"execute_code_blocks"},"execute","_","code","_","blocks"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def execute_code_blocks(code_blocks)\n")),(0,l.yg)("p",null,"Execute the code blocks and return the result."),(0,l.yg)("h4",{id:"execute_function"},"execute","_","function"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def execute_function(func_call)\n")),(0,l.yg)("p",null,"Execute a function call and return the result."),(0,l.yg)("p",null,"Override this function to modify the way to execute a function call."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"func_call"),' - a dictionary extracted from openai message at key "function_call" with keys "name" and "arguments".')),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Returns"),":"),(0,l.yg)("p",null,"  A tuple of (is_exec_success, result_dict)."),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"is_exec_success")," ",(0,l.yg)("em",{parentName:"li"},"boolean")," - whether the execution is successful."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"result_dict"),' - a dictionary with keys "name", "role", and "content". Value of "role" is "function".')),(0,l.yg)("h4",{id:"generate_init_message"},"generate","_","init","_","message"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def generate_init_message(**context) -> Union[str, Dict]\n")),(0,l.yg)("p",null,"Generate the initial message for the agent."),(0,l.yg)("p",null,'Override this function to customize the initial message based on user\'s request.\nIf not overriden, "message" needs to be provided in the context.'),(0,l.yg)("h4",{id:"register_function"},"register","_","function"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def register_function(function_map: Dict[str, Callable])\n")),(0,l.yg)("p",null,"Register functions to the agent."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"function_map")," - a dictionary mapping function names to functions.")))}p.isMDXComponent=!0}}]);