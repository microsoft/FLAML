"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3236],{5680:(e,r,n)=>{n.d(r,{xA:()=>p,yg:()=>m});var t=n(6540);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=t.createContext({}),s=function(e){var r=t.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):o(o({},r),e)),n},p=function(e){var r=s(e.components);return t.createElement(c.Provider,{value:r},e.children)},h={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},u=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,g=u["".concat(c,".").concat(m)]||u[m]||h[m]||i;return n?t.createElement(g,o(o({ref:r},p),{},{components:n})):t.createElement(g,o({ref:r},p))}));function m(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var c in r)hasOwnProperty.call(r,c)&&(l[c]=r[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6492:(e,r,n)=>{n.r(r),n.d(r,{contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var t=n(8168),a=(n(6540),n(5680));const i={sidebar_label:"online_searcher",title:"tune.searcher.online_searcher"},o=void 0,l={unversionedId:"reference/tune/searcher/online_searcher",id:"reference/tune/searcher/online_searcher",isDocsHomePage:!1,title:"tune.searcher.online_searcher",description:"BaseSearcher Objects",source:"@site/docs/reference/tune/searcher/online_searcher.md",sourceDirName:"reference/tune/searcher",slug:"/reference/tune/searcher/online_searcher",permalink:"/FLAML/docs/reference/tune/searcher/online_searcher",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/tune/searcher/online_searcher.md",tags:[],version:"current",frontMatter:{sidebar_label:"online_searcher",title:"tune.searcher.online_searcher"},sidebar:"referenceSideBar",previous:{title:"flow2",permalink:"/FLAML/docs/reference/tune/searcher/flow2"},next:{title:"search_thread",permalink:"/FLAML/docs/reference/tune/searcher/search_thread"}},c=[{value:"BaseSearcher Objects",id:"basesearcher-objects",children:[],level:2},{value:"ChampionFrontierSearcher Objects",id:"championfrontiersearcher-objects",children:[{value:"__init__",id:"__init__",children:[],level:4},{value:"set_search_properties",id:"set_search_properties",children:[],level:4},{value:"next_trial",id:"next_trial",children:[],level:4}],level:2}],s={toc:c};function p(e){let{components:r,...n}=e;return(0,a.yg)("wrapper",(0,t.A)({},s,n,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"basesearcher-objects"},"BaseSearcher Objects"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"class BaseSearcher()\n")),(0,a.yg)("p",null,"Abstract class for an online searcher."),(0,a.yg)("h2",{id:"championfrontiersearcher-objects"},"ChampionFrontierSearcher Objects"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"class ChampionFrontierSearcher(BaseSearcher)\n")),(0,a.yg)("p",null,"The ChampionFrontierSearcher class."),(0,a.yg)("p",null,"NOTE about the correspondence about this code and the research paper:\n",(0,a.yg)("a",{parentName:"p",href:"https://arxiv.org/pdf/2106.04815.pdf"},"ChaCha for Online AutoML"),".\nThis class serves the role of ConfigOralce as described in the paper."),(0,a.yg)("h4",{id:"__init__"},"_","_","init","_","_"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'def __init__(init_config: Dict,\n             space: Optional[Dict] = None,\n             metric: Optional[str] = None,\n             mode: Optional[str] = None,\n             random_seed: Optional[int] = 2345,\n             online_trial_args: Optional[Dict] = {},\n             nonpoly_searcher_name: Optional[str] = "CFO")\n')),(0,a.yg)("p",null,"Constructor."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"init_config")," - A dictionary of initial configuration."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"space")," - A dictionary to specify the search space."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"metric")," - A string of the metric name to optimize for."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"mode")," - A string in ","['min', 'max']"," to specify the objective as\nminimization or maximization."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"random_seed")," - An integer of the random seed."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"online_trial_args")," - A dictionary to specify the online trial\narguments for experimental purpose."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"nonpoly_searcher_name")," - A string to specify the search algorithm\nfor nonpoly hyperparameters.")),(0,a.yg)("h4",{id:"set_search_properties"},"set","_","search","_","properties"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"def set_search_properties(metric: Optional[str] = None,\n                          mode: Optional[str] = None,\n                          config: Optional[Dict] = {},\n                          setting: Optional[Dict] = {},\n                          init_call: Optional[bool] = False)\n")),(0,a.yg)("p",null,"Construct search space with the given config, and setup the search."),(0,a.yg)("h4",{id:"next_trial"},"next","_","trial"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"def next_trial()\n")),(0,a.yg)("p",null,"Return a trial from the _challenger_list."))}p.isMDXComponent=!0}}]);