"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8768],{5680:(e,n,a)=>{a.d(n,{xA:()=>m,yg:()=>s});var l=a(6540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,l)}return a}function t(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,l,r=function(e,n){if(null==e)return{};var a,l,r={},i=Object.keys(e);for(l=0;l<i.length;l++)a=i[l],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)a=i[l],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=l.createContext({}),u=function(e){var n=l.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):t(t({},n),e)),a},m=function(e){var n=u(e.components);return l.createElement(p.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},d=l.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=u(a),s=r,y=d["".concat(p,".").concat(s)]||d[s]||g[s]||i;return a?l.createElement(y,t(t({ref:n},m),{},{components:a})):l.createElement(y,t({ref:n},m))}));function s(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,t=new Array(i);t[0]=d;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,t[1]=o;for(var u=2;u<i;u++)t[u]=a[u];return l.createElement.apply(null,t)}return l.createElement.apply(null,a)}d.displayName="MDXCreateElement"},1129:(e,n,a)=>{a.r(n),a.d(n,{contentTitle:()=>t,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var l=a(8168),r=(a(6540),a(5680));const i={sidebar_label:"sample",title:"tune.sample"},t=void 0,o={unversionedId:"reference/tune/sample",id:"reference/tune/sample",isDocsHomePage:!1,title:"tune.sample",description:"Domain Objects",source:"@site/docs/reference/tune/sample.md",sourceDirName:"reference/tune",slug:"/reference/tune/sample",permalink:"/FLAML/docs/reference/tune/sample",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/tune/sample.md",tags:[],version:"current",frontMatter:{sidebar_label:"sample",title:"tune.sample"},sidebar:"referenceSideBar",previous:{title:"logger",permalink:"/FLAML/docs/reference/tune/logger"},next:{title:"space",permalink:"/FLAML/docs/reference/tune/space"}},p=[{value:"Domain Objects",id:"domain-objects",children:[{value:"cast",id:"cast",children:[],level:4},{value:"is_valid",id:"is_valid",children:[],level:4}],level:2},{value:"Grid Objects",id:"grid-objects",children:[{value:"uniform",id:"uniform",children:[],level:4},{value:"quniform",id:"quniform",children:[],level:4},{value:"loguniform",id:"loguniform",children:[],level:4},{value:"qloguniform",id:"qloguniform",children:[],level:4},{value:"choice",id:"choice",children:[],level:4},{value:"randint",id:"randint",children:[],level:4},{value:"lograndint",id:"lograndint",children:[],level:4},{value:"qrandint",id:"qrandint",children:[],level:4},{value:"qlograndint",id:"qlograndint",children:[],level:4},{value:"randn",id:"randn",children:[],level:4},{value:"qrandn",id:"qrandn",children:[],level:4}],level:2}],u={toc:p};function m(e){let{components:n,...a}=e;return(0,r.yg)("wrapper",(0,l.A)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h2",{id:"domain-objects"},"Domain Objects"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"class Domain()\n")),(0,r.yg)("p",null,"Base class to specify a type and valid range to sample parameters from.\nThis base class is implemented by parameter spaces, like float ranges\n(",(0,r.yg)("inlineCode",{parentName:"p"},"Float"),"), integer ranges (",(0,r.yg)("inlineCode",{parentName:"p"},"Integer"),"), or categorical variables\n(",(0,r.yg)("inlineCode",{parentName:"p"},"Categorical"),"). The ",(0,r.yg)("inlineCode",{parentName:"p"},"Domain")," object contains information about\nvalid values (e.g. minimum and maximum values), and exposes methods that\nallow specification of specific samplers (e.g. ",(0,r.yg)("inlineCode",{parentName:"p"},"uniform()")," or\n",(0,r.yg)("inlineCode",{parentName:"p"},"loguniform()"),")."),(0,r.yg)("h4",{id:"cast"},"cast"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"def cast(value)\n")),(0,r.yg)("p",null,"Cast value to domain type"),(0,r.yg)("h4",{id:"is_valid"},"is","_","valid"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"def is_valid(value: Any)\n")),(0,r.yg)("p",null,"Returns True if ",(0,r.yg)("inlineCode",{parentName:"p"},"value")," is a valid value in this domain."),(0,r.yg)("h2",{id:"grid-objects"},"Grid Objects"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"class Grid(Sampler)\n")),(0,r.yg)("p",null,"Dummy sampler used for grid search"),(0,r.yg)("h4",{id:"uniform"},"uniform"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"def uniform(lower: float, upper: float)\n")),(0,r.yg)("p",null,"Sample a float value uniformly between ",(0,r.yg)("inlineCode",{parentName:"p"},"lower")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"upper"),".\nSampling from ",(0,r.yg)("inlineCode",{parentName:"p"},"tune.uniform(1, 10)")," is equivalent to sampling from\n",(0,r.yg)("inlineCode",{parentName:"p"},"np.random.uniform(1, 10))")),(0,r.yg)("h4",{id:"quniform"},"quniform"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"def quniform(lower: float, upper: float, q: float)\n")),(0,r.yg)("p",null,"Sample a quantized float value uniformly between ",(0,r.yg)("inlineCode",{parentName:"p"},"lower")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"upper"),".\nSampling from ",(0,r.yg)("inlineCode",{parentName:"p"},"tune.uniform(1, 10)")," is equivalent to sampling from\n",(0,r.yg)("inlineCode",{parentName:"p"},"np.random.uniform(1, 10))"),"\nThe value will be quantized, i.e. rounded to an integer increment of ",(0,r.yg)("inlineCode",{parentName:"p"},"q"),".\nQuantization makes the upper bound inclusive."),(0,r.yg)("h4",{id:"loguniform"},"loguniform"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"def loguniform(lower: float, upper: float, base: float = 10)\n")),(0,r.yg)("p",null,"Sugar for sampling in different orders of magnitude."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"lower")," ",(0,r.yg)("em",{parentName:"li"},"float")," - Lower boundary of the output interval (e.g. 1e-4)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"upper")," ",(0,r.yg)("em",{parentName:"li"},"float")," - Upper boundary of the output interval (e.g. 1e-2)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"base")," ",(0,r.yg)("em",{parentName:"li"},"int")," - Base of the log. Defaults to 10.")),(0,r.yg)("h4",{id:"qloguniform"},"qloguniform"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"def qloguniform(lower: float, upper: float, q: float, base: float = 10)\n")),(0,r.yg)("p",null,"Sugar for sampling in different orders of magnitude.\nThe value will be quantized, i.e. rounded to an integer increment of ",(0,r.yg)("inlineCode",{parentName:"p"},"q"),".\nQuantization makes the upper bound inclusive."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"lower")," ",(0,r.yg)("em",{parentName:"li"},"float")," - Lower boundary of the output interval (e.g. 1e-4)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"upper")," ",(0,r.yg)("em",{parentName:"li"},"float")," - Upper boundary of the output interval (e.g. 1e-2)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"q")," ",(0,r.yg)("em",{parentName:"li"},"float")," - Quantization number. The result will be rounded to an\ninteger increment of this value."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"base")," ",(0,r.yg)("em",{parentName:"li"},"int")," - Base of the log. Defaults to 10.")),(0,r.yg)("h4",{id:"choice"},"choice"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"def choice(categories: Sequence)\n")),(0,r.yg)("p",null,"Sample a categorical value.\nSampling from ",(0,r.yg)("inlineCode",{parentName:"p"},"tune.choice([1, 2])")," is equivalent to sampling from\n",(0,r.yg)("inlineCode",{parentName:"p"},"np.random.choice([1, 2])")),(0,r.yg)("h4",{id:"randint"},"randint"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"def randint(lower: int, upper: int)\n")),(0,r.yg)("p",null,"Sample an integer value uniformly between ",(0,r.yg)("inlineCode",{parentName:"p"},"lower")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"upper"),".\n",(0,r.yg)("inlineCode",{parentName:"p"},"lower")," is inclusive, ",(0,r.yg)("inlineCode",{parentName:"p"},"upper")," is exclusive.\nSampling from ",(0,r.yg)("inlineCode",{parentName:"p"},"tune.randint(10)")," is equivalent to sampling from\n",(0,r.yg)("inlineCode",{parentName:"p"},"np.random.randint(10)")),(0,r.yg)("h4",{id:"lograndint"},"lograndint"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"def lograndint(lower: int, upper: int, base: float = 10)\n")),(0,r.yg)("p",null,"Sample an integer value log-uniformly between ",(0,r.yg)("inlineCode",{parentName:"p"},"lower")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"upper"),",\nwith ",(0,r.yg)("inlineCode",{parentName:"p"},"base")," being the base of logarithm.\n",(0,r.yg)("inlineCode",{parentName:"p"},"lower")," is inclusive, ",(0,r.yg)("inlineCode",{parentName:"p"},"upper")," is exclusive."),(0,r.yg)("h4",{id:"qrandint"},"qrandint"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"def qrandint(lower: int, upper: int, q: int = 1)\n")),(0,r.yg)("p",null,"Sample an integer value uniformly between ",(0,r.yg)("inlineCode",{parentName:"p"},"lower")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"upper"),"."),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"lower")," is inclusive, ",(0,r.yg)("inlineCode",{parentName:"p"},"upper")," is also inclusive (!)."),(0,r.yg)("p",null,"The value will be quantized, i.e. rounded to an integer increment of ",(0,r.yg)("inlineCode",{parentName:"p"},"q"),".\nQuantization makes the upper bound inclusive."),(0,r.yg)("h4",{id:"qlograndint"},"qlograndint"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"def qlograndint(lower: int, upper: int, q: int, base: float = 10)\n")),(0,r.yg)("p",null,"Sample an integer value log-uniformly between ",(0,r.yg)("inlineCode",{parentName:"p"},"lower")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"upper"),",\nwith ",(0,r.yg)("inlineCode",{parentName:"p"},"base")," being the base of logarithm.\n",(0,r.yg)("inlineCode",{parentName:"p"},"lower")," is inclusive, ",(0,r.yg)("inlineCode",{parentName:"p"},"upper")," is also inclusive (!).\nThe value will be quantized, i.e. rounded to an integer increment of ",(0,r.yg)("inlineCode",{parentName:"p"},"q"),".\nQuantization makes the upper bound inclusive."),(0,r.yg)("h4",{id:"randn"},"randn"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"def randn(mean: float = 0.0, sd: float = 1.0)\n")),(0,r.yg)("p",null,"Sample a float value normally with ",(0,r.yg)("inlineCode",{parentName:"p"},"mean")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"sd"),"."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"mean")," ",(0,r.yg)("em",{parentName:"li"},"float")," - Mean of the normal distribution. Defaults to 0."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"sd")," ",(0,r.yg)("em",{parentName:"li"},"float")," - SD of the normal distribution. Defaults to 1.")),(0,r.yg)("h4",{id:"qrandn"},"qrandn"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"def qrandn(mean: float, sd: float, q: float)\n")),(0,r.yg)("p",null,"Sample a float value normally with ",(0,r.yg)("inlineCode",{parentName:"p"},"mean")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"sd"),"."),(0,r.yg)("p",null,"The value will be quantized, i.e. rounded to an integer increment of ",(0,r.yg)("inlineCode",{parentName:"p"},"q"),"."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"mean")," - Mean of the normal distribution."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"sd")," - SD of the normal distribution."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"q")," - Quantization number. The result will be rounded to an\ninteger increment of this value.")))}m.isMDXComponent=!0}}]);