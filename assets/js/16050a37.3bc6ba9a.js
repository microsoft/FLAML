"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4260],{5680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>d});var a=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function g(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),s=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},y=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,c=g(e,["components","mdxType","originalType","parentName"]),y=s(t),d=r,u=y["".concat(i,".").concat(d)]||y[d]||p[d]||l;return t?a.createElement(u,o(o({ref:n},c),{},{components:t})):a.createElement(u,o({ref:n},c))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=y;var g={};for(var i in n)hasOwnProperty.call(n,i)&&(g[i]=n[i]);g.originalType=e,g.mdxType="string"==typeof e?e:r,o[1]=g;for(var s=2;s<l;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},305:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>g,toc:()=>i});var a=t(8168),r=(t(6540),t(5680));const l={sidebar_label:"agent",title:"autogen.agentchat.agent"},o=void 0,g={unversionedId:"reference/autogen/agentchat/agent",id:"reference/autogen/agentchat/agent",isDocsHomePage:!1,title:"autogen.agentchat.agent",description:"Agent Objects",source:"@site/docs/reference/autogen/agentchat/agent.md",sourceDirName:"reference/autogen/agentchat",slug:"/reference/autogen/agentchat/agent",permalink:"/FLAML/docs/reference/autogen/agentchat/agent",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/autogen/agentchat/agent.md",tags:[],version:"current",frontMatter:{sidebar_label:"agent",title:"autogen.agentchat.agent"},sidebar:"referenceSideBar",previous:{title:"retrieve_user_proxy_agent",permalink:"/FLAML/docs/reference/autogen/agentchat/contrib/retrieve_user_proxy_agent"},next:{title:"assistant_agent",permalink:"/FLAML/docs/reference/autogen/agentchat/assistant_agent"}},i=[{value:"Agent Objects",id:"agent-objects",children:[{value:"__init__",id:"__init__",children:[],level:4},{value:"name",id:"name",children:[],level:4},{value:"send",id:"send",children:[],level:4},{value:"a_send",id:"a_send",children:[],level:4},{value:"receive",id:"receive",children:[],level:4},{value:"a_receive",id:"a_receive",children:[],level:4},{value:"reset",id:"reset",children:[],level:4},{value:"generate_reply",id:"generate_reply",children:[],level:4},{value:"a_generate_reply",id:"a_generate_reply",children:[],level:4}],level:2}],s={toc:i};function c(e){let{components:n,...t}=e;return(0,r.yg)("wrapper",(0,a.A)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h2",{id:"agent-objects"},"Agent Objects"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"class Agent()\n")),(0,r.yg)("p",null,"(In preview) An abstract class for AI agent."),(0,r.yg)("p",null,"An agent can communicate with other agents and perform actions.\nDifferent agents can differ in what actions they perform in the ",(0,r.yg)("inlineCode",{parentName:"p"},"receive")," method."),(0,r.yg)("h4",{id:"__init__"},"_","_","init","_","_"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"def __init__(name: str)\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"name")," ",(0,r.yg)("em",{parentName:"li"},"str")," - name of the agent.")),(0,r.yg)("h4",{id:"name"},"name"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"@property\ndef name()\n")),(0,r.yg)("p",null,"Get the name of the agent."),(0,r.yg)("h4",{id:"send"},"send"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'def send(message: Union[Dict, str],\n         recipient: "Agent",\n         request_reply: Optional[bool] = None)\n')),(0,r.yg)("p",null,"(Abstract method) Send a message to another agent."),(0,r.yg)("h4",{id:"a_send"},"a","_","send"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'async def a_send(message: Union[Dict, str],\n                 recipient: "Agent",\n                 request_reply: Optional[bool] = None)\n')),(0,r.yg)("p",null,"(Abstract async method) Send a message to another agent."),(0,r.yg)("h4",{id:"receive"},"receive"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'def receive(message: Union[Dict, str],\n            sender: "Agent",\n            request_reply: Optional[bool] = None)\n')),(0,r.yg)("p",null,"(Abstract method) Receive a message from another agent."),(0,r.yg)("h4",{id:"a_receive"},"a","_","receive"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'async def a_receive(message: Union[Dict, str],\n                    sender: "Agent",\n                    request_reply: Optional[bool] = None)\n')),(0,r.yg)("p",null,"(Abstract async method) Receive a message from another agent."),(0,r.yg)("h4",{id:"reset"},"reset"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"def reset()\n")),(0,r.yg)("p",null,"(Abstract method) Reset the agent."),(0,r.yg)("h4",{id:"generate_reply"},"generate","_","reply"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'def generate_reply(messages: Optional[List[Dict]] = None,\n                   sender: Optional["Agent"] = None,\n                   **kwargs) -> Union[str, Dict, None]\n')),(0,r.yg)("p",null,"(Abstract method) Generate a reply based on the received messages."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"messages")," ",(0,r.yg)("em",{parentName:"li"},"list","[dict]")," - a list of messages received."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"sender")," - sender of an Agent instance.")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Returns"),":"),(0,r.yg)("p",null,"  str or dict or None: the generated reply. If None, no reply is generated."),(0,r.yg)("h4",{id:"a_generate_reply"},"a","_","generate","_","reply"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'async def a_generate_reply(messages: Optional[List[Dict]] = None,\n                           sender: Optional["Agent"] = None,\n                           **kwargs) -> Union[str, Dict, None]\n')),(0,r.yg)("p",null,"(Abstract async method) Generate a reply based on the received messages."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"messages")," ",(0,r.yg)("em",{parentName:"li"},"list","[dict]")," - a list of messages received."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"sender")," - sender of an Agent instance.")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Returns"),":"),(0,r.yg)("p",null,"  str or dict or None: the generated reply. If None, no reply is generated."))}c.isMDXComponent=!0}}]);