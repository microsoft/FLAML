"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6490],{5680:(e,n,t)=>{t.d(n,{xA:()=>g,yg:()=>m});var i=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),p=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},g=function(e){var n=p(e.components);return i.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},c=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,g=o(e,["components","mdxType","originalType","parentName"]),c=p(t),m=a,d=c["".concat(s,".").concat(m)]||c[m]||u[m]||r;return t?i.createElement(d,l(l({ref:n},g),{},{components:t})):i.createElement(d,l({ref:n},g))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=c;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<r;p++)l[p]=t[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}c.displayName="MDXCreateElement"},9921:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>l,default:()=>g,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var i=t(8168),a=(t(6540),t(5680));const r={sidebar_label:"code_utils",title:"autogen.code_utils"},l=void 0,o={unversionedId:"reference/autogen/code_utils",id:"reference/autogen/code_utils",isDocsHomePage:!1,title:"autogen.code_utils",description:"infer\\_lang",source:"@site/docs/reference/autogen/code_utils.md",sourceDirName:"reference/autogen",slug:"/reference/autogen/code_utils",permalink:"/FLAML/docs/reference/autogen/code_utils",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/autogen/code_utils.md",tags:[],version:"current",frontMatter:{sidebar_label:"code_utils",title:"autogen.code_utils"},sidebar:"referenceSideBar",previous:{title:"openai_utils",permalink:"/FLAML/docs/reference/autogen/oai/openai_utils"},next:{title:"math_utils",permalink:"/FLAML/docs/reference/autogen/math_utils"}},s=[{value:"infer_lang",id:"infer_lang",children:[],level:4},{value:"extract_code",id:"extract_code",children:[],level:4},{value:"generate_code",id:"generate_code",children:[],level:4},{value:"improve_function",id:"improve_function",children:[],level:4},{value:"improve_code",id:"improve_code",children:[],level:4},{value:"execute_code",id:"execute_code",children:[],level:4},{value:"generate_assertions",id:"generate_assertions",children:[],level:4},{value:"eval_function_completions",id:"eval_function_completions",children:[],level:4},{value:"PassAssertionFilter Objects",id:"passassertionfilter-objects",children:[{value:"pass_assertions",id:"pass_assertions",children:[],level:4},{value:"implement",id:"implement",children:[],level:4}],level:2}],p={toc:s};function g(e){let{components:n,...t}=e;return(0,a.yg)("wrapper",(0,i.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h4",{id:"infer_lang"},"infer","_","lang"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"def infer_lang(code)\n")),(0,a.yg)("p",null,"infer the language for the code.\nTODO: make it robust."),(0,a.yg)("h4",{id:"extract_code"},"extract","_","code"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"def extract_code(text: str,\n                 pattern: str = CODE_BLOCK_PATTERN) -> List[Tuple[str, str]]\n")),(0,a.yg)("p",null,"Extract code from a text."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"text")," ",(0,a.yg)("em",{parentName:"li"},"str")," - The text to extract code from."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"pattern")," ",(0,a.yg)("em",{parentName:"li"},"Optional, str")," - The regular expression pattern for finding the code block.")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Returns"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"list")," - A list of tuples, each containing the language and the code.")),(0,a.yg)("h4",{id:"generate_code"},"generate","_","code"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"def generate_code(pattern: str = CODE_BLOCK_PATTERN,\n                  **config) -> Tuple[str, float]\n")),(0,a.yg)("p",null,"Generate code."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"pattern")," ",(0,a.yg)("em",{parentName:"li"},"Optional, str")," - The regular expression pattern for finding the code block.\nThe default pattern is for finding a code block in a markdown file."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"config")," ",(0,a.yg)("em",{parentName:"li"},"Optional, dict")," - The configuration for the API call.")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Returns"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"str")," - The generated code."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"float")," - The cost of the generation.")),(0,a.yg)("h4",{id:"improve_function"},"improve","_","function"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"def improve_function(file_name, func_name, objective, **config)\n")),(0,a.yg)("p",null,"(work in progress) Improve the function to achieve the objective."),(0,a.yg)("h4",{id:"improve_code"},"improve","_","code"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"def improve_code(files, objective, suggest_only=True, **config)\n")),(0,a.yg)("p",null,"Improve the code to achieve a given objective."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"files")," ",(0,a.yg)("em",{parentName:"li"},"list")," - A list of file names containing the source code."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"objective")," ",(0,a.yg)("em",{parentName:"li"},"str")," - The objective to achieve."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"suggest_only")," ",(0,a.yg)("em",{parentName:"li"},"bool")," - Whether to return only the suggestions or the improved code."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"config")," ",(0,a.yg)("em",{parentName:"li"},"Optional, dict")," - The configuration for the API call.")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Returns"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"str")," - The improved code if suggest_only=False; a list of suggestions if suggest_only=True (default)."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"float")," - The cost of the generation.")),(0,a.yg)("h4",{id:"execute_code"},"execute","_","code"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'def execute_code(code: Optional[str] = None,\n                 timeout: Optional[int] = None,\n                 filename: Optional[str] = None,\n                 work_dir: Optional[str] = None,\n                 use_docker: Optional[Union[List[str], str, bool]] = docker\n                 is not None,\n                 lang: Optional[str] = "python") -> Tuple[int, str, str]\n')),(0,a.yg)("p",null,"Execute code in a docker container.\nThis function is not tested on MacOS."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"code")," ",(0,a.yg)("em",{parentName:"li"},"Optional, str")," - The code to execute.\nIf None, the code from the file specified by filename will be executed.\nEither code or filename must be provided."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"timeout")," ",(0,a.yg)("em",{parentName:"li"},"Optional, int")," - The maximum execution time in seconds.\nIf None, a default timeout will be used. The default timeout is 600 seconds. On Windows, the timeout is not enforced when use_docker=False."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"filename")," ",(0,a.yg)("em",{parentName:"li"},"Optional, str")," - The file name to save the code or where the code is stored when ",(0,a.yg)("inlineCode",{parentName:"li"},"code")," is None.\nIf None, a file with a randomly generated name will be created.\nThe randomly generated file will be deleted after execution.\nThe file name must be a relative path. Relative paths are relative to the working directory."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"work_dir")," ",(0,a.yg)("em",{parentName:"li"},"Optional, str"),' - The working directory for the code execution.\nIf None, a default working directory will be used.\nThe default working directory is the "extensions" directory under\n"path_to_flaml/autogen".'),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"use_docker")," ",(0,a.yg)("em",{parentName:"li"},"Optional, list, str or bool")," - The docker image to use for code execution.\nIf a list or a str of image name(s) is provided, the code will be executed in a docker container\nwith the first image successfully pulled.\nIf None, False or empty, the code will be executed in the current environment.\nDefault is True, which will be converted into a list.\nIf the code is executed in the current environment,\nthe code must be trusted."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"lang")," ",(0,a.yg)("em",{parentName:"li"},"Optional, str"),' - The language of the code. Default is "python".')),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Returns"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"int")," - 0 if the code executes successfully."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"str")," - The error message if the code fails to execute; the stdout otherwise."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"image")," - The docker image name after container run when docker is used.")),(0,a.yg)("h4",{id:"generate_assertions"},"generate","_","assertions"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"def generate_assertions(definition: str, **config) -> Tuple[str, float]\n")),(0,a.yg)("p",null,"Generate assertions for a function."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"definition")," ",(0,a.yg)("em",{parentName:"li"},"str")," - The function definition, including the signature and docstr."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"config")," ",(0,a.yg)("em",{parentName:"li"},"Optional, dict")," - The configuration for the API call.")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Returns"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"str")," - The generated assertions."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"float")," - The cost of the generation.")),(0,a.yg)("h4",{id:"eval_function_completions"},"eval","_","function","_","completions"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"def eval_function_completions(responses: List[str],\n                              definition: str,\n                              test: Optional[str] = None,\n                              entry_point: Optional[str] = None,\n                              assertions: Optional[Union[str, Callable[\n                                  [str], Tuple[str, float]]]] = None,\n                              timeout: Optional[float] = 3,\n                              use_docker: Optional[bool] = True) -> Dict\n")),(0,a.yg)("p",null,"Select a response from a list of responses for the function completion task (using generated assertions), and/or evaluate if the task is successful using a gold test."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"responses")," ",(0,a.yg)("em",{parentName:"li"},"list")," - The list of responses."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"definition")," ",(0,a.yg)("em",{parentName:"li"},"str")," - The input definition."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"test")," ",(0,a.yg)("em",{parentName:"li"},"Optional, str")," - The test code."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"entry_point")," ",(0,a.yg)("em",{parentName:"li"},"Optional, str")," - The name of the function."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"assertions")," ",(0,a.yg)("em",{parentName:"li"},"Optional, str or Callable")," - The assertion code which serves as a filter of the responses, or an assertion generator.\nWhen provided, only the responses that pass the assertions will be considered for the actual test (if provided)."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"timeout")," ",(0,a.yg)("em",{parentName:"li"},"Optional, float")," - The timeout for executing the code.")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Returns"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"dict")," - The success metrics.")),(0,a.yg)("h2",{id:"passassertionfilter-objects"},"PassAssertionFilter Objects"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"class PassAssertionFilter()\n")),(0,a.yg)("h4",{id:"pass_assertions"},"pass","_","assertions"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"def pass_assertions(context, response, **_)\n")),(0,a.yg)("p",null,"Check if the response passes the assertions."),(0,a.yg)("h4",{id:"implement"},"implement"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"def implement(\n    definition: str,\n    configs: Optional[List[Dict]] = None,\n    assertions: Optional[Union[str,\n                               Callable[[str],\n                                        Tuple[str,\n                                              float]]]] = generate_assertions\n) -> Tuple[str, float]\n")),(0,a.yg)("p",null,"Implement a function from a definition."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"definition")," ",(0,a.yg)("em",{parentName:"li"},"str")," - The function definition, including the signature and docstr."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"configs")," ",(0,a.yg)("em",{parentName:"li"},"list")," - The list of configurations for completion."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"assertions")," ",(0,a.yg)("em",{parentName:"li"},"Optional, str or Callable")," - The assertion code which serves as a filter of the responses, or an assertion generator.")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Returns"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"str")," - The implementation."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"float")," - The cost of the implementation."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"int")," - The index of the configuration which generates the implementation.")))}g.isMDXComponent=!0}}]);