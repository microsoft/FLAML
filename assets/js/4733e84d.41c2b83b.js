"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5805],{5680:(e,a,t)=>{t.d(a,{xA:()=>m,yg:()=>u});var r=t(6540);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var o=r.createContext({}),p=function(e){var a=r.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},m=function(e){var a=p(e.components);return r.createElement(o.Provider,{value:a},e.children)},c={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},g=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,l=e.originalType,o=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),g=p(t),u=n,y=g["".concat(o,".").concat(u)]||g[u]||c[u]||l;return t?r.createElement(y,s(s({ref:a},m),{},{components:t})):r.createElement(y,s({ref:a},m))}));function u(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var l=t.length,s=new Array(l);s[0]=g;var i={};for(var o in a)hasOwnProperty.call(a,o)&&(i[o]=a[o]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var p=2;p<l;p++)s[p]=t[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},6914:(e,a,t)=>{t.r(a),t.d(a,{contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>o});var r=t(8168),n=(t(6540),t(5680));const l={sidebar_label:"model",title:"automl.model"},s=void 0,i={unversionedId:"reference/automl/model",id:"reference/automl/model",isDocsHomePage:!1,title:"automl.model",description:"BaseEstimator Objects",source:"@site/docs/reference/automl/model.md",sourceDirName:"reference/automl",slug:"/reference/automl/model",permalink:"/FLAML/docs/reference/automl/model",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/automl/model.md",tags:[],version:"current",frontMatter:{sidebar_label:"model",title:"automl.model"},sidebar:"referenceSideBar",previous:{title:"ml",permalink:"/FLAML/docs/reference/automl/ml"},next:{title:"state",permalink:"/FLAML/docs/reference/automl/state"}},o=[{value:"BaseEstimator Objects",id:"baseestimator-objects",children:[{value:"__init__",id:"__init__",children:[],level:4},{value:"model",id:"model",children:[],level:4},{value:"estimator",id:"estimator",children:[],level:4},{value:"feature_names_in_",id:"feature_names_in_",children:[],level:4},{value:"feature_importances_",id:"feature_importances_",children:[],level:4},{value:"fit",id:"fit",children:[],level:4},{value:"predict",id:"predict",children:[],level:4},{value:"predict_proba",id:"predict_proba",children:[],level:4},{value:"score",id:"score",children:[],level:4},{value:"search_space",id:"search_space",children:[],level:4},{value:"size",id:"size",children:[],level:4},{value:"cost_relative2lgbm",id:"cost_relative2lgbm",children:[],level:4},{value:"init",id:"init",children:[],level:4},{value:"config2params",id:"config2params",children:[],level:4}],level:2},{value:"SparkEstimator Objects",id:"sparkestimator-objects",children:[{value:"fit",id:"fit-1",children:[],level:4},{value:"predict",id:"predict-1",children:[],level:4},{value:"predict_proba",id:"predict_proba-1",children:[],level:4}],level:2},{value:"SparkLGBMEstimator Objects",id:"sparklgbmestimator-objects",children:[],level:2},{value:"SparkRandomForestEstimator Objects",id:"sparkrandomforestestimator-objects",children:[{value:"predict",id:"predict-2",children:[],level:4}],level:2},{value:"TransformersEstimator Objects",id:"transformersestimator-objects",children:[],level:2},{value:"SKLearnEstimator Objects",id:"sklearnestimator-objects",children:[],level:2},{value:"LGBMEstimator Objects",id:"lgbmestimator-objects",children:[],level:2},{value:"XGBoostEstimator Objects",id:"xgboostestimator-objects",children:[],level:2},{value:"XGBoostSklearnEstimator Objects",id:"xgboostsklearnestimator-objects",children:[],level:2},{value:"XGBoostLimitDepthEstimator Objects",id:"xgboostlimitdepthestimator-objects",children:[],level:2},{value:"RandomForestEstimator Objects",id:"randomforestestimator-objects",children:[],level:2},{value:"ExtraTreesEstimator Objects",id:"extratreesestimator-objects",children:[],level:2},{value:"LRL1Classifier Objects",id:"lrl1classifier-objects",children:[],level:2},{value:"LRL2Classifier Objects",id:"lrl2classifier-objects",children:[],level:2},{value:"CatBoostEstimator Objects",id:"catboostestimator-objects",children:[],level:2},{value:"SVCEstimator Objects",id:"svcestimator-objects",children:[{value:"predict_proba",id:"predict_proba-2",children:[],level:4}],level:2},{value:"SparkNaiveBayesEstimator Objects",id:"sparknaivebayesestimator-objects",children:[],level:2},{value:"SGDEstimator Objects",id:"sgdestimator-objects",children:[{value:"predict_proba",id:"predict_proba-3",children:[],level:4}],level:2},{value:"ElasticNetEstimator Objects",id:"elasticnetestimator-objects",children:[],level:2},{value:"LassoLarsEstimator Objects",id:"lassolarsestimator-objects",children:[],level:2},{value:"SparkGLREstimator Objects",id:"sparkglrestimator-objects",children:[],level:2},{value:"SparkLinearRegressionEstimator Objects",id:"sparklinearregressionestimator-objects",children:[],level:2},{value:"SparkLinearSVCEstimator Objects",id:"sparklinearsvcestimator-objects",children:[],level:2},{value:"SparkGBTEstimator Objects",id:"sparkgbtestimator-objects",children:[],level:2},{value:"SparkAFTSurvivalRegressionEstimator Objects",id:"sparkaftsurvivalregressionestimator-objects",children:[],level:2}],p={toc:o};function m(e){let{components:a,...t}=e;return(0,n.yg)("wrapper",(0,r.A)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,n.yg)("h2",{id:"baseestimator-objects"},"BaseEstimator Objects"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"class BaseEstimator()\n")),(0,n.yg)("p",null,"The abstract class for all learners."),(0,n.yg)("p",null,"Typical examples:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"XGBoostEstimator: for regression."),(0,n.yg)("li",{parentName:"ul"},"XGBoostSklearnEstimator: for classification."),(0,n.yg)("li",{parentName:"ul"},"LGBMEstimator, RandomForestEstimator, LRL1Classifier, LRL2Classifier:\nfor both regression and classification.")),(0,n.yg)("h4",{id:"__init__"},"_","_","init","_","_"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},'def __init__(task="binary", **config)\n')),(0,n.yg)("p",null,"Constructor."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"task")," - A string of the task type, one of\n'binary', 'multiclass', 'regression', 'rank', 'seq-classification',\n'seq-regression', 'token-classification', 'multichoice-classification',\n'summarization', 'ts_forecast', 'ts_forecast_classification'."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"config")," - A dictionary containing the hyperparameter names, 'n_jobs' as keys.\nn_jobs is the number of parallel threads.")),(0,n.yg)("h4",{id:"model"},"model"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"@property\ndef model()\n")),(0,n.yg)("p",null,"Trained model after fit() is called, or None before fit() is called."),(0,n.yg)("h4",{id:"estimator"},"estimator"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"@property\ndef estimator()\n")),(0,n.yg)("p",null,"Get the best trained estimator model."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Returns"),":"),(0,n.yg)("p",null,"  object or None: The trained model obtained after calling the ",(0,n.yg)("inlineCode",{parentName:"p"},"fit()")," method,\nrepresenting the best estimator found during the training process. If ",(0,n.yg)("inlineCode",{parentName:"p"},"fit()")," has\nnot been called yet, it returns ",(0,n.yg)("inlineCode",{parentName:"p"},"None"),"."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Examples"),":"),(0,n.yg)("blockquote",null,(0,n.yg)("blockquote",{parentName:"blockquote"},(0,n.yg)("blockquote",{parentName:"blockquote"},(0,n.yg)("p",{parentName:"blockquote"},"from flaml import AutoML\nautoml = AutoML()\nautoml.fit(X_train, y_train)\nbest_estimator = automl.model.estimator\nprint(best_estimator)\nRandomForestClassifier()")))),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Notes"),":"),(0,n.yg)("p",null,"  To access the best estimator, use ",(0,n.yg)("inlineCode",{parentName:"p"},"automl.model.estimator"),"."),(0,n.yg)("h4",{id:"feature_names_in_"},"feature","_","names","_","in","_"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"@property\ndef feature_names_in_()\n")),(0,n.yg)("p",null,"if self.",(0,n.yg)("em",{parentName:"p"},"model has attribute feature_names_in"),", return it.\notherwise, if self.",(0,n.yg)("em",{parentName:"p"},"model has attribute feature_name"),", return it.\notherwise, if self._model has attribute feature_names, return it.\notherwise, if self._model has method get_booster, return the feature names.\notherwise, return None."),(0,n.yg)("h4",{id:"feature_importances_"},"feature","_","importances","_"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"@property\ndef feature_importances_()\n")),(0,n.yg)("p",null,"if self.",(0,n.yg)("em",{parentName:"p"},"model has attribute feature_importances"),", return it.\notherwise, if self.",(0,n.yg)("em",{parentName:"p"},"model has attribute coef"),", return it.\notherwise, return None."),(0,n.yg)("h4",{id:"fit"},"fit"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"def fit(X_train, y_train, budget=None, free_mem_ratio=0, **kwargs)\n")),(0,n.yg)("p",null,"Train the model from given training data."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"X_train")," - A numpy array or a dataframe of training data in shape n*m."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"y_train")," - A numpy array or a series of labels in shape n*1."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"budget")," - A float of the time budget in seconds."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"free_mem_ratio")," - A float between 0 and 1 for the free memory ratio to keep during training.")),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Returns"),":"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"train_time")," - A float of the training time in seconds.")),(0,n.yg)("h4",{id:"predict"},"predict"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"def predict(X, **kwargs)\n")),(0,n.yg)("p",null,"Predict label from features."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"X")," - A numpy array or a dataframe of featurized instances, shape n*m.")),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Returns"),":"),(0,n.yg)("p",null,"  A numpy array of shape n*1.\nEach element is the label for a instance."),(0,n.yg)("h4",{id:"predict_proba"},"predict","_","proba"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"def predict_proba(X, **kwargs)\n")),(0,n.yg)("p",null,"Predict the probability of each class from features."),(0,n.yg)("p",null,"Only works for classification problems"),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"X")," - A numpy array of featurized instances, shape n*m.")),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Returns"),":"),(0,n.yg)("p",null,"  A numpy array of shape n*c. c is the # classes.\nEach element at (i,j) is the probability for instance i to be in\nclass j."),(0,n.yg)("h4",{id:"score"},"score"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"def score(X_val: DataFrame, y_val: Series, **kwargs)\n")),(0,n.yg)("p",null,"Report the evaluation score of a trained estimator."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"X_val")," - A pandas dataframe of the validation input data."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"y_val")," - A pandas series of the validation label."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"kwargs")," - keyword argument of the evaluation function, for example:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"metric: A string of the metric name or a function\ne.g., 'accuracy', 'roc_auc', 'roc_auc_ovr', 'roc_auc_ovo',\n'f1', 'micro_f1', 'macro_f1', 'log_loss', 'mae', 'mse', 'r2',\n'mape'. Default is 'auto'.\nIf metric is given, the score will report the user specified metric.\nIf metric is not given, the metric is set to accuracy for classification and r2\nfor regression.\nYou can also pass a customized metric function, for examples on how to pass a\ncustomized metric function, please check\n",(0,n.yg)("a",{parentName:"li",href:"https://github.com/microsoft/FLAML/blob/main/test/nlp/test_autohf_custom_metric.py"},"test/nlp/test_autohf_custom_metric.py")," and\n",(0,n.yg)("a",{parentName:"li",href:"https://github.com/microsoft/FLAML/blob/main/test/automl/test_multiclass.py"},"test/automl/test_multiclass.py"),".")))),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Returns"),":"),(0,n.yg)("p",null,"  The evaluation score on the validation dataset."),(0,n.yg)("h4",{id:"search_space"},"search","_","space"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"@classmethod\ndef search_space(cls, data_size, task, **params)\n")),(0,n.yg)("p",null,"[required method]"," search space."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"data_size")," - A tuple of two integers, number of rows and columns."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"task"),' - A str of the task type, e.g., "binary", "multiclass", "regression".')),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Returns"),":"),(0,n.yg)("p",null,"  A dictionary of the search space.\nEach key is the name of a hyperparameter, and value is a dict with\nits domain (required) and low_cost_init_value, init_value,\ncat_hp_cost (if applicable).\ne.g., ",(0,n.yg)("inlineCode",{parentName:"p"},"{'domain': tune.randint(lower=1, upper=10), 'init_value': 1}"),"."),(0,n.yg)("h4",{id:"size"},"size"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"@classmethod\ndef size(cls, config: dict) -> float\n")),(0,n.yg)("p",null,"[optional method]"," memory size of the estimator in bytes."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"config")," - A dict of the hyperparameter config.")),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Returns"),":"),(0,n.yg)("p",null,"  A float of the memory size required by the estimator to train the\ngiven config."),(0,n.yg)("h4",{id:"cost_relative2lgbm"},"cost","_","relative2lgbm"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"@classmethod\ndef cost_relative2lgbm(cls) -> float\n")),(0,n.yg)("p",null,"[optional method]"," relative cost compared to lightgbm."),(0,n.yg)("h4",{id:"init"},"init"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"@classmethod\ndef init(cls)\n")),(0,n.yg)("p",null,"[optional method]"," initialize the class."),(0,n.yg)("h4",{id:"config2params"},"config2params"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"def config2params(config: dict) -> dict\n")),(0,n.yg)("p",null,"[optional method]"," config dict to params dict"),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"config")," - A dict of the hyperparameter config.")),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Returns"),":"),(0,n.yg)("p",null,"  A dict that will be passed to self.estimator_class's constructor."),(0,n.yg)("h2",{id:"sparkestimator-objects"},"SparkEstimator Objects"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"class SparkEstimator(BaseEstimator)\n")),(0,n.yg)("p",null,"The base class for fine-tuning spark models, using pyspark.ml and SynapseML API."),(0,n.yg)("h4",{id:"fit-1"},"fit"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},'def fit(X_train: psDataFrame,\n        y_train: psSeries = None,\n        budget=None,\n        free_mem_ratio=0,\n        index_col: str = "tmp_index_col",\n        **kwargs)\n')),(0,n.yg)("p",null,"Train the model from given training data."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"X_train")," - A pyspark.pandas DataFrame of training data in shape n*m."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"y_train")," - A pyspark.pandas Series in shape n*1. None if X_train is a pyspark.pandas\nDataframe contains y_train."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"budget")," - A float of the time budget in seconds."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"free_mem_ratio")," - A float between 0 and 1 for the free memory ratio to keep during training.")),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Returns"),":"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"train_time")," - A float of the training time in seconds.")),(0,n.yg)("h4",{id:"predict-1"},"predict"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},'def predict(X, index_col="tmp_index_col", return_all=False, **kwargs)\n')),(0,n.yg)("p",null,"Predict label from features."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"X")," - A pyspark or pyspark.pandas dataframe of featurized instances, shape n*m."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"index_col"),' - A str of the index column name. Default to "tmp_index_col".'),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"return_all")," - A bool of whether to return all the prediction results. Default to False.")),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Returns"),":"),(0,n.yg)("p",null,"  A pyspark.pandas series of shape n*1 if return_all is False. Otherwise, a pyspark.pandas dataframe."),(0,n.yg)("h4",{id:"predict_proba-1"},"predict","_","proba"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},'def predict_proba(X, index_col="tmp_index_col", return_all=False, **kwargs)\n')),(0,n.yg)("p",null,"Predict the probability of each class from features.\nOnly works for classification problems"),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"X")," - A pyspark or pyspark.pandas dataframe of featurized instances, shape n*m."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"index_col"),' - A str of the index column name. Default to "tmp_index_col".'),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"return_all")," - A bool of whether to return all the prediction results. Default to False.")),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Returns"),":"),(0,n.yg)("p",null,"  A pyspark.pandas dataframe of shape n*c. c is the # classes.\nEach element at (i,j) is the probability for instance i to be in\nclass j."),(0,n.yg)("h2",{id:"sparklgbmestimator-objects"},"SparkLGBMEstimator Objects"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"class SparkLGBMEstimator(SparkEstimator)\n")),(0,n.yg)("p",null,"The class for fine-tuning spark version lightgbm models, using SynapseML API."),(0,n.yg)("h2",{id:"sparkrandomforestestimator-objects"},"SparkRandomForestEstimator Objects"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"class SparkRandomForestEstimator(SparkEstimator)\n")),(0,n.yg)("p",null,"The SparkEstimator class for Random Forest."),(0,n.yg)("h4",{id:"predict-2"},"predict"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},'def predict(X, index_col="tmp_index_col", return_all=False, **kwargs)\n')),(0,n.yg)("p",null,"Predict label from features."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"X")," - A pyspark or pyspark.pandas dataframe of featurized instances, shape n*m."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"index_col"),' - A str of the index column name. Default to "tmp_index_col".'),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"return_all")," - A bool of whether to return all the prediction results. Default to False.")),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Returns"),":"),(0,n.yg)("p",null,"  A pyspark.pandas series of shape n*1 if return_all is False. Otherwise, a pyspark.pandas dataframe."),(0,n.yg)("h2",{id:"transformersestimator-objects"},"TransformersEstimator Objects"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"class TransformersEstimator(BaseEstimator)\n")),(0,n.yg)("p",null,"The class for fine-tuning language models, using huggingface transformers API."),(0,n.yg)("h2",{id:"sklearnestimator-objects"},"SKLearnEstimator Objects"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"class SKLearnEstimator(BaseEstimator)\n")),(0,n.yg)("p",null,"The base class for tuning scikit-learn estimators."),(0,n.yg)("p",null,"Subclasses can modify the function signature of ",(0,n.yg)("inlineCode",{parentName:"p"},"__init__")," to\nignore the values in ",(0,n.yg)("inlineCode",{parentName:"p"},"config")," that are not relevant to the constructor\nof their underlying estimator. For example, some regressors in ",(0,n.yg)("inlineCode",{parentName:"p"},"scikit-learn"),"\ndon't accept the ",(0,n.yg)("inlineCode",{parentName:"p"},"n_jobs")," parameter contained in ",(0,n.yg)("inlineCode",{parentName:"p"},"config"),". For these,\none can add ",(0,n.yg)("inlineCode",{parentName:"p"},"n_jobs=None,")," before ",(0,n.yg)("inlineCode",{parentName:"p"},"**config")," to make sure ",(0,n.yg)("inlineCode",{parentName:"p"},"config")," doesn't\ncontain an ",(0,n.yg)("inlineCode",{parentName:"p"},"n_jobs")," key."),(0,n.yg)("h2",{id:"lgbmestimator-objects"},"LGBMEstimator Objects"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"class LGBMEstimator(BaseEstimator)\n")),(0,n.yg)("p",null,"The class for tuning LGBM, using sklearn API."),(0,n.yg)("h2",{id:"xgboostestimator-objects"},"XGBoostEstimator Objects"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"class XGBoostEstimator(SKLearnEstimator)\n")),(0,n.yg)("p",null,"The class for tuning XGBoost regressor, not using sklearn API."),(0,n.yg)("h2",{id:"xgboostsklearnestimator-objects"},"XGBoostSklearnEstimator Objects"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"class XGBoostSklearnEstimator(SKLearnEstimator, LGBMEstimator)\n")),(0,n.yg)("p",null,"The class for tuning XGBoost with unlimited depth, using sklearn API."),(0,n.yg)("h2",{id:"xgboostlimitdepthestimator-objects"},"XGBoostLimitDepthEstimator Objects"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"class XGBoostLimitDepthEstimator(XGBoostSklearnEstimator)\n")),(0,n.yg)("p",null,"The class for tuning XGBoost with limited depth, using sklearn API."),(0,n.yg)("h2",{id:"randomforestestimator-objects"},"RandomForestEstimator Objects"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"class RandomForestEstimator(SKLearnEstimator, LGBMEstimator)\n")),(0,n.yg)("p",null,"The class for tuning Random Forest."),(0,n.yg)("h2",{id:"extratreesestimator-objects"},"ExtraTreesEstimator Objects"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"class ExtraTreesEstimator(RandomForestEstimator)\n")),(0,n.yg)("p",null,"The class for tuning Extra Trees."),(0,n.yg)("h2",{id:"lrl1classifier-objects"},"LRL1Classifier Objects"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"class LRL1Classifier(SKLearnEstimator)\n")),(0,n.yg)("p",null,"The class for tuning Logistic Regression with L1 regularization."),(0,n.yg)("h2",{id:"lrl2classifier-objects"},"LRL2Classifier Objects"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"class LRL2Classifier(SKLearnEstimator)\n")),(0,n.yg)("p",null,"The class for tuning Logistic Regression with L2 regularization."),(0,n.yg)("h2",{id:"catboostestimator-objects"},"CatBoostEstimator Objects"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"class CatBoostEstimator(BaseEstimator)\n")),(0,n.yg)("p",null,"The class for tuning CatBoost."),(0,n.yg)("h2",{id:"svcestimator-objects"},"SVCEstimator Objects"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"class SVCEstimator(SKLearnEstimator)\n")),(0,n.yg)("p",null,"The class for tuning Linear Support Vector Machine Classifier."),(0,n.yg)("h4",{id:"predict_proba-2"},"predict","_","proba"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"def predict_proba(X, **kwargs)\n")),(0,n.yg)("p",null,"Predict the probability of each class from features."),(0,n.yg)("p",null,"Only works for classification problems"),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"X")," - A numpy array of featurized instances, shape n*m.")),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Returns"),":"),(0,n.yg)("p",null,"  A numpy array of shape n*c. c is the # classes.\nEach element at (i,j) is the probability for instance i to be in\nclass j."),(0,n.yg)("h2",{id:"sparknaivebayesestimator-objects"},"SparkNaiveBayesEstimator Objects"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"class SparkNaiveBayesEstimator(SparkEstimator)\n")),(0,n.yg)("p",null,"The class for tuning Naive Bayes Classifier."),(0,n.yg)("h2",{id:"sgdestimator-objects"},"SGDEstimator Objects"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"class SGDEstimator(SKLearnEstimator)\n")),(0,n.yg)("p",null,"The class for tuning Stoachastic Gradient Descent model."),(0,n.yg)("h4",{id:"predict_proba-3"},"predict","_","proba"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"def predict_proba(X, **kwargs)\n")),(0,n.yg)("p",null,"Predict the probability of each class from features."),(0,n.yg)("p",null,"Only works for classification problems"),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"X")," - A numpy array of featurized instances, shape n*m.")),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Returns"),":"),(0,n.yg)("p",null,"  A numpy array of shape n*c. c is the # classes.\nEach element at (i,j) is the probability for instance i to be in\nclass j."),(0,n.yg)("h2",{id:"elasticnetestimator-objects"},"ElasticNetEstimator Objects"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"class ElasticNetEstimator(SKLearnEstimator)\n")),(0,n.yg)("p",null,"The class for tuning Elastic Net regression model."),(0,n.yg)("h2",{id:"lassolarsestimator-objects"},"LassoLarsEstimator Objects"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"class LassoLarsEstimator(SKLearnEstimator)\n")),(0,n.yg)("p",null,"The class for tuning Lasso model fit with Least Angle Regression a.k.a. Lars."),(0,n.yg)("h2",{id:"sparkglrestimator-objects"},"SparkGLREstimator Objects"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"class SparkGLREstimator(SparkEstimator)\n")),(0,n.yg)("p",null,"The class for tuning Generalized Linear Regression PySpark model."),(0,n.yg)("h2",{id:"sparklinearregressionestimator-objects"},"SparkLinearRegressionEstimator Objects"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"class SparkLinearRegressionEstimator(SparkEstimator)\n")),(0,n.yg)("p",null,"The class for tuning Linear Regression PySpark model."),(0,n.yg)("h2",{id:"sparklinearsvcestimator-objects"},"SparkLinearSVCEstimator Objects"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"class SparkLinearSVCEstimator(SparkEstimator)\n")),(0,n.yg)("p",null,"The class for tuning Linear SVC PySpark model."),(0,n.yg)("h2",{id:"sparkgbtestimator-objects"},"SparkGBTEstimator Objects"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"class SparkGBTEstimator(SparkEstimator)\n")),(0,n.yg)("p",null,"The class for tuning GBT PySpark model."),(0,n.yg)("h2",{id:"sparkaftsurvivalregressionestimator-objects"},"SparkAFTSurvivalRegressionEstimator Objects"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"class SparkAFTSurvivalRegressionEstimator(SparkEstimator)\n")),(0,n.yg)("p",null,"The class for tuning AFTSurvivalRegression PySpark model."))}m.isMDXComponent=!0}}]);