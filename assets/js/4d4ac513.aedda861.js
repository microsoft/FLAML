"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4014],{5680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>_});var i=t(6540);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,l=function(e,n){if(null==e)return{};var t,i,l={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=i.createContext({}),c=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=c(e.components);return i.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,l=e.mdxType,a=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=c(t),_=l,d=m["".concat(s,".").concat(_)]||m[_]||u[_]||a;return t?i.createElement(d,r(r({ref:n},p),{},{components:t})):i.createElement(d,r({ref:n},p))}));function _(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var a=t.length,r=new Array(a);r[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var c=2;c<a;c++)r[c]=t[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5979:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>s});var i=t(8168),l=(t(6540),t(5680));const a={sidebar_label:"trial",title:"onlineml.trial"},r=void 0,o={unversionedId:"reference/onlineml/trial",id:"reference/onlineml/trial",isDocsHomePage:!1,title:"onlineml.trial",description:"get\\ns\\feature\\dim\\from\\vw\\example",source:"@site/docs/reference/onlineml/trial.md",sourceDirName:"reference/onlineml",slug:"/reference/onlineml/trial",permalink:"/FLAML/docs/reference/onlineml/trial",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/onlineml/trial.md",tags:[],version:"current",frontMatter:{sidebar_label:"trial",title:"onlineml.trial"},sidebar:"referenceSideBar",previous:{title:"autovw",permalink:"/FLAML/docs/reference/onlineml/autovw"},next:{title:"trial_runner",permalink:"/FLAML/docs/reference/onlineml/trial_runner"}},s=[{value:"get_ns_feature_dim_from_vw_example",id:"get_ns_feature_dim_from_vw_example",children:[],level:4},{value:"OnlineResult Objects",id:"onlineresult-objects",children:[{value:"CB_COEF",id:"cb_coef",children:[],level:4},{value:"__init__",id:"__init__",children:[],level:4},{value:"update_result",id:"update_result",children:[],level:4}],level:2},{value:"BaseOnlineTrial Objects",id:"baseonlinetrial-objects",children:[{value:"__init__",id:"__init__-1",children:[],level:4},{value:"set_resource_lease",id:"set_resource_lease",children:[],level:4},{value:"set_status",id:"set_status",children:[],level:4}],level:2},{value:"VowpalWabbitTrial Objects",id:"vowpalwabbittrial-objects",children:[{value:"__init__",id:"__init__-2",children:[],level:4},{value:"train_eval_model_online",id:"train_eval_model_online",children:[],level:4},{value:"predict",id:"predict",children:[],level:4}],level:2}],c={toc:s};function p(e){let{components:n,...t}=e;return(0,l.yg)("wrapper",(0,i.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,l.yg)("h4",{id:"get_ns_feature_dim_from_vw_example"},"get","_","ns","_","feature","_","dim","_","from","_","vw","_","example"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def get_ns_feature_dim_from_vw_example(vw_example) -> dict\n")),(0,l.yg)("p",null,"Get a dictionary of feature dimensionality for each namespace singleton."),(0,l.yg)("h2",{id:"onlineresult-objects"},"OnlineResult Objects"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"class OnlineResult()\n")),(0,l.yg)("p",null,"Class for managing the result statistics of a trial."),(0,l.yg)("h4",{id:"cb_coef"},"CB","_","COEF"),(0,l.yg)("p",null,"0.001 for mse"),(0,l.yg)("h4",{id:"__init__"},"_","_","init","_","_"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},'def __init__(result_type_name: str,\n             cb_coef: Optional[float] = None,\n             init_loss: Optional[float] = 0.0,\n             init_cb: Optional[float] = 100.0,\n             mode: Optional[str] = "min",\n             sliding_window_size: Optional[int] = 100)\n')),(0,l.yg)("p",null,"Constructor."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"result_type_name")," - A String to specify the name of the result type."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"cb_coef")," - a string to specify the coefficient on the confidence bound."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"init_loss")," - a float to specify the inital loss."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"init_cb")," - a float to specify the intial confidence bound."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"mode")," - A string in ","['min', 'max']"," to specify the objective as\nminimization or maximization."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"sliding_window_size")," - An int to specify the size of the sliding window\n(for experimental purpose).")),(0,l.yg)("h4",{id:"update_result"},"update","_","result"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def update_result(new_loss,\n                  new_resource_used,\n                  data_dimension,\n                  bound_of_range=1.0,\n                  new_observation_count=1.0)\n")),(0,l.yg)("p",null,"Update result statistics."),(0,l.yg)("h2",{id:"baseonlinetrial-objects"},"BaseOnlineTrial Objects"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"class BaseOnlineTrial(Trial)\n")),(0,l.yg)("p",null,"Class for the online trial."),(0,l.yg)("h4",{id:"__init__-1"},"_","_","init","_","_"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},'def __init__(config: dict,\n             min_resource_lease: float,\n             is_champion: Optional[bool] = False,\n             is_checked_under_current_champion: Optional[bool] = True,\n             custom_trial_name: Optional[str] = "mae",\n             trial_id: Optional[str] = None)\n')),(0,l.yg)("p",null,"Constructor."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"config")," - The configuration dictionary."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"min_resource_lease")," - A float specifying the minimum resource lease."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"is_champion")," - A bool variable indicating whether the trial is champion."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"is_checked_under_current_champion")," - A bool indicating whether the trial\nhas been used under the current champion."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"custom_trial_name")," - A string of a custom trial name."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"trial_id")," - A string for the trial id.")),(0,l.yg)("h4",{id:"set_resource_lease"},"set","_","resource","_","lease"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def set_resource_lease(resource: float)\n")),(0,l.yg)("p",null,"Sets the resource lease accordingly."),(0,l.yg)("h4",{id:"set_status"},"set","_","status"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def set_status(status)\n")),(0,l.yg)("p",null,"Sets the status of the trial and record the start time."),(0,l.yg)("h2",{id:"vowpalwabbittrial-objects"},"VowpalWabbitTrial Objects"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"class VowpalWabbitTrial(BaseOnlineTrial)\n")),(0,l.yg)("p",null,"The class for Vowpal Wabbit online trials."),(0,l.yg)("h4",{id:"__init__-2"},"_","_","init","_","_"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},'def __init__(config: dict,\n             min_resource_lease: float,\n             metric: str = "mae",\n             is_champion: Optional[bool] = False,\n             is_checked_under_current_champion: Optional[bool] = True,\n             custom_trial_name: Optional[str] = "vw_mae_clipped",\n             trial_id: Optional[str] = None,\n             cb_coef: Optional[float] = None)\n')),(0,l.yg)("p",null,"Constructor."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"config")," ",(0,l.yg)("em",{parentName:"li"},"dict")," - the config of the trial (note that the config is a set\nbecause the hyperparameters are)."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"min_resource_lease")," ",(0,l.yg)("em",{parentName:"li"},"float")," - the minimum resource lease."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"metric")," ",(0,l.yg)("em",{parentName:"li"},"str")," - the loss metric."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"is_champion")," ",(0,l.yg)("em",{parentName:"li"},"bool")," - indicates whether the trial is the current champion or not."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"is_checked_under_current_champion")," ",(0,l.yg)("em",{parentName:"li"},"bool")," - indicates whether this trials has\nbeen paused under the current champion."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"trial_id")," ",(0,l.yg)("em",{parentName:"li"},"str")," - id of the trial (if None, it will be generated in the constructor).")),(0,l.yg)("h4",{id:"train_eval_model_online"},"train","_","eval","_","model","_","online"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def train_eval_model_online(data_sample, y_pred)\n")),(0,l.yg)("p",null,"Train and evaluate model online."),(0,l.yg)("h4",{id:"predict"},"predict"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def predict(x)\n")),(0,l.yg)("p",null,"Predict using the model."))}p.isMDXComponent=!0}}]);