@startuml

'Diagram visualization params
skinparam RoundCorner 10
skinparam class {
    AttributeFontColor #2b2b2b
    AttributeFontName Arial
    AttributeFontSize 14
    BackgroundColor #f6f7f9
    BorderColor #3f6184
    BorderThickness 2
    FontColor #f6f7f9
    FontName Arial
    FontSize 18
    HeaderBackgroundColor #3f6184
}

'Class diagram descriptions

'External classes
class torch.nn.Module {}
class transformers.AutoModel {}
class transformers.AutoTokenizer {}
class torch.utils.data.sampler.RandomSampler {}
class torch.utils.data.sampler.SequentialSampler {}


'marlin classes

'Module Interface
namespace marlin.core.module_interface {
    class CallbackInterface {
        on_end_train_step()
        on_end_train_epoch()
        on_end_backward()
        on_end_val_epoch()
        on_end_train()
    }
    abstract class ModuleInterface {
        forward()
        {abstract} get_optimizers_schedulers()
        {abstract} get_train_dataloader()
        {abstract} get_val_dataloaders()
        {abstract} train_step()
        {abstract} val_step()
    }
}

'Trainer Backend
namespace marlin.core.trainer_backend {
    class TrainerBackendArguments {}
    abstract class TrainerBackend{
        {abstract} init()
        {abstract} train_dl()
        {abstract} validate_dl()
        {abstract} get_batches_completed()
        {abstract} get_global_steps_completed()
        {abstract} train_sampler()
        {abstract} val_sampler()
    }
    class SingleProcess {
        ModuleInterface model
        RandomSampler train_sampler
        SequentialSampler val_sampler

        init()
        train_dl()
        validate_dl()
        get_batches_completed()
        get_global_steps_completed()
        train_sampler()
        val_sampler()
        process_global_step()
        collect_outputs()
        optimize()
    }
}

'Trainer
namespace marlin.core.trainer {
    class TrainerArguments {}
    note top: Customize this and other\n args from config.yaml
    abstract class AbstractTrainer {
        {abstract} train()
        {abstract} validate()
    }
    class Trainer{
        TrainerBackend trainer_backend
        ModuleInterface module
        AbstractCheckpointer checkpointer
        optimizers
        schedulers

        train()
        validate()
        load_checkpoint()
    }
}

'Data Interface
namespace marlin.core.data_interface {

    abstract class DataProcessor {
        analyze()
        {abstract} process()
    }
    abstract class DataInterface {
        setup_datasets()
        process_data()
        multi_process_data()
        {abstract} get_train_dataset()
        {abstract} get_val_dataset()
        {abstract} get_test_dataset()
    }
}

namespace marlin.utils.checkpointer.checkpoint_utils {
    class DefaultCheckpointerArguments {}
}
namespace marlin.utils.writer.base {
    class WriterInitArgs {}
}
namespace marlin.utils.stats.basic_stats {
    class StatInitArgs {}
}


'Scenario classes
class TweetSentModule {
    DataInterface data
    AutoModel model
    AutoTokenizer tokenizer
    ModuleInterfaceArguments args

    reset()
    get_train_dataloader()
    get_val_dataloaders()
    get_test_dataloaders()
    train_step()
    val_step()
    collate_fn()
    get_optimizers_schedulers()
    on_end_train_step()
    on_end_train_epoch()
    on_end_val_epoch()
    on_end_train()
}
note left: Training recipe.

class ModuleInterfaceArguments {}

class TweetDataset {
    __len__()
    __getitem__()
}

class TweetSentData {
    DataInterfaceArguments args

    setup_datasets()
    get_train_dataset()
    get_val_dataset()
    get_test_dataset()
    get_labels_to_index()
    get_index_to_labels()
}

together {
    class DataInterfaceArguments {}

    class Stage1 {
        process()
        create_dataset()
    }

    class Stage2{
        process()
        analyze()
    }
}

marlin.core.module_interface.ModuleInterface <|-- marlin.core.module_interface.CallbackInterface
marlin.core.module_interface.ModuleInterface <|-- torch.nn.Module
TweetSentModule <|-- marlin.core.module_interface.ModuleInterface
TweetDataset <|-- torch.utils.data.Dataset
TweetSentData <|-- marlin.core.data_interface.DataInterface
marlin.core.trainer_backend.SingleProcess <|-- marlin.core.trainer_backend.TrainerBackend
marlin.core.trainer.Trainer <|-- marlin.core.trainer.AbstractTrainer
marlin.core.trainer.Trainer o-- marlin.core.trainer_backend.SingleProcess
marlin.core.trainer.Trainer o-- TweetSentModule
TweetSentModule *-- transformers.AutoModel
TweetSentModule *-- transformers.AutoTokenizer	
TweetSentData *-- TweetDataset
marlin.core.data_interface.DataInterface -- marlin.core.data_interface.DataProcessor
TweetSentModule o-- TweetSentData
TweetSentModule o-- ModuleInterfaceArguments

marlin.core.trainer_backend.SingleProcess *-- marlin.core.trainer_backend.TrainerBackendArguments
marlin.core.trainer.Trainer o-- marlin.core.trainer.TrainerArguments
marlin.core.trainer.TrainerArguments o-- marlin.utils.writer.base.WriterInitArgs
marlin.core.trainer.TrainerArguments o-- marlin.utils.checkpointer.checkpoint_utils.DefaultCheckpointerArguments
marlin.core.trainer.TrainerArguments o-- marlin.utils.stats.basic_stats.StatInitArgs

marlin.core.trainer_backend.SingleProcess *-- torch.utils.data.sampler.SequentialSampler 
marlin.core.trainer_backend.SingleProcess *-- torch.utils.data.sampler.RandomSampler

Stage1 <|- marlin.core.data_interface.DataProcessor
Stage2 <|- marlin.core.data_interface.DataProcessor
Stage1 -- TweetSentData
Stage2 -- TweetSentData
TweetSentData o-- DataInterfaceArguments

'Dummy connections to improve layout
Stage1 -[hidden]> Stage2
marlin.utils.checkpointer.checkpoint_utils.DefaultCheckpointerArguments -[hidden]up- marlin.utils.writer.base.WriterInitArgs
marlin.utils.stats.basic_stats.StatInitArgs -[hidden]up- marlin.utils.checkpointer.checkpoint_utils.DefaultCheckpointerArguments
torch.utils.data.sampler.SequentialSampler -[hidden]up- torch.utils.data.sampler.RandomSampler

@enduml
